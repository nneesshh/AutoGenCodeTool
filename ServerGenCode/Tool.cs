using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Text.RegularExpressions;

namespace behaviac_gen_agent
{
    public enum META_KIND
    {
        SYSTEM,
        CUSTOM,
        ENUM
    }

    //
    public static class Tool
    {
        public static string _sIndent = "\t";
        public static string _sIndent_x_2 = "\t\t";

        /// <summary>
        /// /// /// ################################################################ Normalize2LowerCase
        /// </summary>
        /// <param name="sId"></param>
        /// <returns></returns>
        public static string Normalize2LowerCase(string sId)
        {
            string toTitleCase(Match m)
            {
                char c = m.Captures[0].Value[0];
                return ((c >= 'A') && (c <= 'Z')) ? "_" + Char.ToLower(c).ToString() : "" + c;
            }
            string sResult = Regex.Replace(sId, @"(\b[a-z]|\B[A-Z])", new MatchEvaluator(toTitleCase));
            return sResult.ToLower();
        }

        /// <summary>
        /// /// ################################################################ _Gen func
        /// </summary>
        /// <param name="sName"></param>
        /// <param name="sPrefix"></param>
        /// <param name="sSuffix"></param>
        /// <returns></returns>
        private static string _GenFullName(string sName, string sPrefix, string sSuffix)
        {
            return sPrefix + sName + sSuffix;
        }

        private static string _GenHeaderFileTitle(string inc, string ns, string hubName, string hubPrefix, string hubSuffix, string metaName, string metaPrefix, string metaSuffix)
        {
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("#pragma once");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("////");
            sb.AppendLine("////    @class C" + fullMetaName);
            sb.AppendLine("////    ");
            sb.AppendLine("////    (C) 2016 n.lee");
            sb.AppendLine("////    ");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");

            // inc
            if (inc.Length > 0)
            {
                sb.AppendLine(inc);
            }

            // ns
            if (ns.Length > 0)
            {
                sb.AppendLine("");
                sb.AppendLine("namespace " + ns + " {");

                if (hubName.Length > 0)
                {
                    sb.AppendLine(_sIndent + "class C" + fullHubName + ";");
                }
                else
                {
                    sb.AppendLine("class C" + fullHubName + ";");
                }

                sb.AppendLine("}");
            }
            else
            {
                if (hubName.Length > 0)
                {
                    sb.AppendLine("");
                    sb.AppendLine("class C" + fullHubName + ";");
                }
            }

            return sb.ToString();
        }

        private static string _GenCppFileTitle(string metaName, string metaPrefix, string metaSuffix)
        {
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("//  " + fullMetaName + ".cpp");
            sb.AppendLine("//  (C) 2016 n.lee");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("#include \"stdafx.h\"");
            sb.AppendLine("#include \"" + fullMetaName + ".h\"");
            sb.AppendLine("");
            sb.AppendLine("#include <time.h>");
            sb.AppendLine("#include <locale.h>");
            sb.AppendLine("");
            sb.AppendLine("#ifdef _MSC_VER");
            sb.AppendLine("# ifdef _DEBUG");
            sb.AppendLine("#  define new new(_NORMAL_BLOCK, __FILE__,__LINE__)");
            sb.AppendLine("# endif");
            sb.AppendLine("#endif");
            return sb.ToString();
        }

        private static string _GenStandaloneCppFileTitle(string fullMetaName)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("//  " + fullMetaName + ".cpp");
            sb.AppendLine("//  (C) 2016 n.lee");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("#include \"stdafx.h\"");
            sb.AppendLine("#include \"" + fullMetaName + ".h\"");
            sb.AppendLine("");
            sb.AppendLine("#include <signal.h>");
            sb.AppendLine("");
            sb.AppendLine("#ifdef _MSC_VER");
            sb.AppendLine("# ifdef _DEBUG");
            sb.AppendLine("#  define new new(_NORMAL_BLOCK, __FILE__,__LINE__)");
            sb.AppendLine("# endif");
            sb.AppendLine("#endif");
            return sb.ToString();
        }

        private static string _GenMainCppFileTitle(string fullMetaName)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("//  " + fullMetaName + ".cpp");
            sb.AppendLine("//  (C) 2016 n.lee");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("#ifdef _MSC_VER");
            sb.AppendLine("# ifdef _DEBUG");
            sb.AppendLine("#  include <vld.h>");
            sb.AppendLine("# endif");
            sb.AppendLine("#endif");
            sb.AppendLine("");
            sb.AppendLine("#ifdef _WIN32");
            sb.AppendLine("# define WIN32_LEAN_AND_MEAN 1");
            sb.AppendLine("# include \"shlwapi.h\"");
            sb.AppendLine("# pragma comment(lib, \"shlwapi.lib\")");
            sb.AppendLine("# define CRTDBG_MAP_ALLOC");
            sb.AppendLine("# include <crtdbg.h>");
            sb.AppendLine("#endif");
            sb.AppendLine("");
            sb.AppendLine("#include \"toolkit/UsingDependency.h\"");
            sb.AppendLine("#include \"toolkit/UsingBase.h\"");
            sb.AppendLine("#include \"toolkit/crash_reporter/crash_reporter.h\"");
            sb.AppendLine("");
            sb.AppendLine("#include \"Standalone.h\"");
            sb.AppendLine("");
            sb.AppendLine("#ifdef _MSC_VER");
            sb.AppendLine("# ifdef _DEBUG");
            sb.AppendLine("#  define new new(_NORMAL_BLOCK, __FILE__,__LINE__)");
            sb.AppendLine("# endif");
            sb.AppendLine("#endif");
            return sb.ToString();
        }

        private static string _GenNetCppFileTitle(string fullMetaName, string serviceInc)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("//  " + fullMetaName + ".cpp");
            sb.AppendLine("//  (C) 2016 n.lee");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("#include \"stdafx.h\"");
            sb.AppendLine("#include \"" + fullMetaName + ".h\"");
            sb.AppendLine("");
            sb.AppendLine("#include <time.h>");
            sb.AppendLine("#include <locale.h>");
            sb.AppendLine("");

            if (serviceInc.Length > 0)
            {
                sb.AppendLine("///<<<");
                sb.AppendLine(serviceInc);
            }

            sb.AppendLine("");
            sb.AppendLine("#ifdef _MSC_VER");
            sb.AppendLine("# ifdef _DEBUG");
            sb.AppendLine("#  define new new(_NORMAL_BLOCK, __FILE__,__LINE__)");
            sb.AppendLine("# endif");
            sb.AppendLine("#endif");
            return sb.ToString();
        }

        private static string _GenClassBrief(string metaName, string metaPrefix, string metaSuffix)
        {
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("/**");
            sb.AppendLine("    @brief C" + fullMetaName);
            sb.AppendLine("           ");
            sb.Append("*/");
            return sb.ToString();
        }

        private static string _GenMethodBrief(string methodName)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("/**");
            sb.AppendLine("    @brief " + methodName + "()");
            sb.AppendLine("           ");
            sb.Append("*/");
            return sb.ToString();
        }

        /// <summary>
        /// ################################################################ Gen
        /// </summary>
        /// <param name="metaName"></param>
        /// <returns></returns>
        public static StringBuilder GenCommonProto(string metaName)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("syntax = \"proto2\";");
            sb.AppendLine("");
            sb.AppendLine("package sg;");
            sb.AppendLine("");
            sb.AppendLine("////////////////////////////////////////////////////////////////");
            sb.AppendLine("//  " + metaName + "");
            sb.AppendLine("////////////////////////////////////////////////////////////////");
            sb.AppendLine("");
            sb.AppendLine("// item -- ");
            sb.AppendLine("message " + metaName + " {");
            sb.AppendLine(_sIndent + "enum ITEM_STATE {");
            sb.AppendLine(_sIndent_x_2 + "TO_DELETE = -1; // 删除, 服务器专用");
            sb.AppendLine(_sIndent_x_2 + "IDLE = 0; // 空闲");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "required int32						id = 1; // 序列号(sn)");
            sb.AppendLine(_sIndent + "optional uint64						cfgid = 2; // cfg typeid");
            sb.AppendLine(_sIndent + "optional ITEM_STATE				state = 3;  // 状态");
            sb.AppendLine(_sIndent + "optional int32						num = 4; // 计数");
            sb.AppendLine(_sIndent + "optional sfixed64					starttime = 5; // 开始时间");
            sb.AppendLine(_sIndent + "optional int32						seconds = 6; // 倒计时");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "optional sfixed64					optime = 11; // 操作时间");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("message " + metaName + "List {");
            sb.AppendLine(_sIndent + "repeated " + metaName + " list = 1;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("// service -- ");
            sb.AppendLine("message User" + metaName + "Service {");
            sb.AppendLine(_sIndent + "enum " + metaName.ToUpper() + "_COMMAND {");
            sb.AppendLine(_sIndent_x_2 + "QUERY = 1; // 查询");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "message " + metaName + "Request {");
            sb.AppendLine(_sIndent_x_2 + "required " + metaName.ToUpper() + "_COMMAND				cmd = 1;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "message " + metaName + "Response {");
            sb.AppendLine(_sIndent_x_2 + "required int32							result = 1; //0 = success, -1 = failed");
            sb.AppendLine(_sIndent_x_2 + "optional " + metaName + "List				item_list = 2;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "optional " + metaName + "Request req = 1;");
            sb.AppendLine(_sIndent + "optional " + metaName + "Response resp = 2;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("// notify -- ");
            sb.AppendLine("message " + metaName + "StateNotify {");
            sb.AppendLine(_sIndent + "optional " + metaName + "List				item_list = 1;");
            sb.AppendLine("}");
            return sb;
        }

        public static StringBuilder GenStoredProcProto(string metaName)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("syntax = \"proto2\"; ");
            sb.AppendLine("option cc_enable_arenas = true;");
            sb.AppendLine("");
            sb.AppendLine("import \"Options.proto\";");
            sb.AppendLine("");
            sb.AppendLine("package db;");
            sb.AppendLine("");
            sb.AppendLine("////////////////////////////////////////////////////////////////");
            sb.AppendLine("message Config" + metaName + " {");
            sb.AppendLine(_sIndent + "required int32				level = 1; // 等级");
            sb.AppendLine(_sIndent + "required uint64				typeid = 2; // cfg typeid");
            sb.AppendLine(_sIndent + "required bytes				drop_list = 3; // 掉落列表");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("message Config" + metaName + "List {");
            sb.AppendLine(_sIndent + "repeated Config" + metaName + _sIndent + "list = 1;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//");
            sb.AppendLine("message proc_load_config_" + Tool.Normalize2LowerCase(metaName) + " {");
            sb.AppendLine(_sIndent + "message Parameter {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "message ReturnRecord {");
            sb.AppendLine(_sIndent_x_2 + "required Config" + metaName + _sIndent + "cfg = 1;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "optional SaveAndLoadOptions	opt = 1;								//");
            sb.AppendLine(_sIndent + "optional Parameter					param	= 2;							//");
            sb.AppendLine(_sIndent + "repeated ReturnRecord				return_record_list = 3;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("////////////////////////////////////////////////////////////////");
            sb.AppendLine("message Game" + metaName + " {");
            sb.AppendLine(_sIndent + "required bytes				id = 1; // 唯一 id");
            sb.AppendLine(_sIndent + "required int32				subid = 2; // 子 id");
            sb.AppendLine(_sIndent + "required uint64				cfgid = 3; // cfg typeid");
            sb.AppendLine(_sIndent + "required int32				state = 4;");
            sb.AppendLine(_sIndent + "required int32				num = 5; // 次数");
            sb.AppendLine(_sIndent + "required sfixed64			starttime = 6; // 开始时间");
            sb.AppendLine(_sIndent + "required int32				seconds = 7; // 倒计时");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "required sfixed64			optime = 11; // 操作时间");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//");
            sb.AppendLine("message proc_load_game_" + Tool.Normalize2LowerCase(metaName) + " {");
            sb.AppendLine(_sIndent + "message Parameter {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "message ReturnRecord {");
            sb.AppendLine(_sIndent_x_2 + "required Game" + metaName + _sIndent_x_2 + "item = 1;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "optional SaveAndLoadOptions	opt = 1;								//");
            sb.AppendLine(_sIndent + "optional Parameter					param	= 2;							//");
            sb.AppendLine(_sIndent + "repeated ReturnRecord				return_record_list = 3;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//");
            sb.AppendLine("message proc_save_game_" + Tool.Normalize2LowerCase(metaName) + " {");
            sb.AppendLine(_sIndent + "message Parameter {");
            sb.AppendLine(_sIndent_x_2 + "required Game" + metaName + _sIndent_x_2 + "p_item = 1;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "optional SaveAndLoadOptions opt = 1;								//");
            sb.AppendLine(_sIndent + "optional Parameter					param	= 2;							//");
            sb.AppendLine("}");
            sb.AppendLine("////////////////////////////////////////////////////////////////");
            sb.AppendLine("message UserStats" + metaName + " {");
            sb.AppendLine(_sIndent + "required bytes				userid = 1;");
            sb.AppendLine(_sIndent + "required sfixed64			refreshtime = 2;");
            sb.AppendLine(_sIndent + "required uint32				flag = 3;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("message proc_load_user_stats_" + Tool.Normalize2LowerCase(metaName) + " {");
            sb.AppendLine(_sIndent + "message Parameter {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "message ReturnRecord {");
            sb.AppendLine(_sIndent_x_2 + "required UserStats" + metaName + _sIndent_x_2 + "stats = 1;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "optional SaveAndLoadOptions	opt = 1;								//");
            sb.AppendLine(_sIndent + "optional Parameter					param	= 2;							//");
            sb.AppendLine(_sIndent + "repeated ReturnRecord				return_record_list = 3;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("message proc_save_user_stats_" + Tool.Normalize2LowerCase(metaName) + " {");
            sb.AppendLine(_sIndent + "message Parameter {");
            sb.AppendLine(_sIndent_x_2 + "required UserStats" + metaName + _sIndent_x_2 + "p_stats = 1;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "optional SaveAndLoadOptions	opt = 1;								//");
            sb.AppendLine(_sIndent + "optional Parameter					param	= 2;							//");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("////////////////////////////////////////////////////////////////");
            sb.AppendLine("message User" + metaName + " {");
            sb.AppendLine(_sIndent + "required bytes				userid = 1;");
            sb.AppendLine(_sIndent + "required int32				sn = 2; // 序列号(唯一id)");
            sb.AppendLine(_sIndent + "required uint64				cfgid = 3; // cfg typeid");
            sb.AppendLine(_sIndent + "required int32				state = 4;");
            sb.AppendLine(_sIndent + "required int32				num = 5; // 次数");
            sb.AppendLine(_sIndent + "required sfixed64			starttime = 6; // 开始时间");
            sb.AppendLine(_sIndent + "required int32				seconds = 7; // 倒计时");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "required sfixed64			optime = 11; // 操作时间");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//");
            sb.AppendLine("message proc_load_user_" + Tool.Normalize2LowerCase(metaName) + " {");
            sb.AppendLine(_sIndent + "message Parameter {");
            sb.AppendLine(_sIndent_x_2 + "required bytes			p_userid = 1;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "message ReturnRecord {");
            sb.AppendLine(_sIndent_x_2 + "required User" + metaName + _sIndent_x_2 + "item = 1;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "optional SaveAndLoadOptions	opt = 1;								//");
            sb.AppendLine(_sIndent + "optional Parameter					param	= 2;							//");
            sb.AppendLine(_sIndent + "repeated ReturnRecord				return_record_list = 3;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//");
            sb.AppendLine("message proc_save_user_" + Tool.Normalize2LowerCase(metaName) + " {");
            sb.AppendLine(_sIndent + "message Parameter {");
            sb.AppendLine(_sIndent_x_2 + "required User" + metaName + _sIndent_x_2 + "p_item = 1;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "optional SaveAndLoadOptions opt = 1;								//");
            sb.AppendLine(_sIndent + "optional Parameter					param	= 2;							//");
            sb.AppendLine("}");
            return sb;
        }

        public static StringBuilder GenStoredProcSql(string metaName)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("");
            sb.AppendLine("");
            sb.AppendLine("SET FOREIGN_KEY_CHECKS = 0;");
            sb.AppendLine("");
            sb.AppendLine("DROP TABLE IF EXISTS `config_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_load_config_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("DROP TABLE IF EXISTS `user_stats_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("DROP TABLE IF EXISTS `game_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_load_game_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_save_game_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_load_user_stats_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_save_user_stats_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("DROP TABLE IF EXISTS `user_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_load_user_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_save_user_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Table structure for config_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP TABLE IF EXISTS `config_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("CREATE TABLE `config_" + Tool.Normalize2LowerCase(metaName) + "` (");
            sb.AppendLine("  `level` int(11) NOT NULL DEFAULT '0' COMMENT '等级',");
            sb.AppendLine("  `typeid` bigint(20) NOT NULL DEFAULT '0' COMMENT 'cfg typeid',");
            sb.AppendLine("  `drop_list` varchar(500) NOT NULL COMMENT '掉落列表',");
            sb.AppendLine("  PRIMARY KEY (`level`,`typeid`)");
            sb.AppendLine(") ENGINE=InnoDB DEFAULT CHARSET=utf8;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Procedure structure for proc_load_config_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_load_config_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("CREATE PROCEDURE `proc_load_config_" + Tool.Normalize2LowerCase(metaName) + "`()");
            sb.AppendLine("BEGIN");
            sb.AppendLine("  --");
            sb.AppendLine("  IF NOT EXISTS (SELECT * FROM config_" + Tool.Normalize2LowerCase(metaName) + " LIMIT 1) THEN");
            sb.AppendLine("    INSERT INTO config_" + Tool.Normalize2LowerCase(metaName) + " (`level`, `typeid`, `drop_list`)");
            sb.AppendLine("    VALUES(1,10001, '1:2:3'),");
            sb.AppendLine("          (1,10002, '4:5:6');");
            sb.AppendLine("  END IF;");
            sb.AppendLine("");
            sb.AppendLine("  --");
            sb.AppendLine("  SELECT * FROM config_" + Tool.Normalize2LowerCase(metaName) + " WHERE 1=1 ORDER BY `level` ASC, `typeid` ASC;");
            sb.AppendLine("END;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Table structure for game_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP TABLE IF EXISTS `game_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("CREATE TABLE `game_" + Tool.Normalize2LowerCase(metaName) + "` (");
            sb.AppendLine("  `id` int(11) NOT NULL DEFAULT '0' COMMENT '唯一 id',");
            sb.AppendLine("  `subid` int(11) NOT NULL DEFAULT '0' COMMENT '子 id',");
            sb.AppendLine("  `cfgid` bigint(20) NOT NULL DEFAULT '0' COMMENT '配置类型id',");
            sb.AppendLine("  `state` int(11) NOT NULL COMMENT '状态',");
            sb.AppendLine("  `num` int(11) NOT NULL COMMENT '次数',");
            sb.AppendLine("  `starttime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '开始时间',");
            sb.AppendLine("  `seconds` int(11) NOT NULL COMMENT '倒计时',");
            sb.AppendLine("  `optime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '操作时间',");
            sb.AppendLine("  PRIMARY KEY (`id`,`subid`)");
            sb.AppendLine(") ENGINE=InnoDB DEFAULT CHARSET=utf8;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Procedure structure for proc_load_game_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_load_game_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("CREATE PROCEDURE `proc_load_game_" + Tool.Normalize2LowerCase(metaName) + "`()");
            sb.AppendLine("BEGIN");
            sb.AppendLine("  --");
            sb.AppendLine("  SELECT * FROM game_" + Tool.Normalize2LowerCase(metaName) + " WHERE 1 = 1 ORDER BY id ASC, subid ASC;");
            sb.AppendLine("END;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Procedure structure for proc_save_game_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_save_game_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("CREATE PROCEDURE `proc_save_game_" + Tool.Normalize2LowerCase(metaName) + "`(IN `p_id` int,");
            sb.AppendLine("                                       IN `p_subid` int,");
            sb.AppendLine("                                       IN `p_cfgid` bigint,");
            sb.AppendLine("                                       IN `p_state` int,");
            sb.AppendLine("                                       IN `p_num` int,");
            sb.AppendLine("                                       IN `p_starttime` datetime,");
            sb.AppendLine("                                       IN `p_seconds` int,");
            sb.AppendLine("                                       IN `p_optime` datetime)");
            sb.AppendLine("BEGIN");
            sb.AppendLine("  --");
            sb.AppendLine("  IF p_id > 0 AND p_sn > 0 THEN");
            sb.AppendLine("    IF 0 > p_state THEN");
            sb.AppendLine("      DELETE FROM `game_" + Tool.Normalize2LowerCase(metaName) + "` WHERE `id` = p_id AND `subid` = p_subid LIMIT 1;");
            sb.AppendLine("    ELSE");
            sb.AppendLine("      INSERT INTO `game_" + Tool.Normalize2LowerCase(metaName) + "` (`id`, `subid`, `cfgid`, `state`, `num`, `starttime`, `seconds`, `optime`)");
            sb.AppendLine("        VALUES(p_id, p_subid, p_cfgid, p_state, p_num, p_starttime, p_seconds, p_optime)");
            sb.AppendLine("          ON DUPLICATE KEY UPDATE `cfgid` = VALUES(`cfgid`),");
            sb.AppendLine("                                  `state` = VALUES(`state`),");
            sb.AppendLine("                                  `num` = VALUES(`num`),");
            sb.AppendLine("                                  `starttime` = VALUES(`starttime`),");
            sb.AppendLine("                                  `seconds` = VALUES(`seconds`),");
            sb.AppendLine("                                  `optime` = VALUES(`optime`);");
            sb.AppendLine("    END IF;");
            sb.AppendLine("  END IF;");
            sb.AppendLine("END;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Table structure for user_stats_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP TABLE IF EXISTS `user_stats_" + Tool.Normalize2LowerCase(metaName) + "`; ");
            sb.AppendLine("CREATE TABLE `user_stats_" + Tool.Normalize2LowerCase(metaName) + "` (");
            sb.AppendLine("  `userid` varchar(50) NOT NULL,");
            sb.AppendLine("  `refreshtime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '刷新时间',");
            sb.AppendLine("  `flag` int(11) NOT NULL COMMENT '旗标',");
            sb.AppendLine("  PRIMARY KEY (`userid`)");
            sb.AppendLine(") ENGINE=InnoDB DEFAULT CHARSET=utf8;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Procedure structure for proc_load_user_stats_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_load_user_stats_" + Tool.Normalize2LowerCase(metaName) + "`; ");
            sb.AppendLine("CREATE PROCEDURE `proc_load_user_stats_" + Tool.Normalize2LowerCase(metaName) + "`()");
            sb.AppendLine("BEGIN");
            sb.AppendLine("  --");
            sb.AppendLine("  SELECT * FROM user_stats_" + Tool.Normalize2LowerCase(metaName) + " WHERE 1 = 1;");
            sb.AppendLine("END;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Procedure structure for proc_save_user_stats_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_save_user_stats_" + Tool.Normalize2LowerCase(metaName) + "`; ");
            sb.AppendLine("CREATE PROCEDURE `proc_save_user_stats_" + Tool.Normalize2LowerCase(metaName) + "`(IN `p_userid` varchar(50),");
            sb.AppendLine("                                                  IN `p_refreshtime` datetime,");
            sb.AppendLine("                                                  IN `p_flag` int)");
            sb.AppendLine("BEGIN");
            sb.AppendLine("  --");
            sb.AppendLine("  IF char_length (p_userid) >= 6 THEN");
            sb.AppendLine("    INSERT INTO `user_stats_" + Tool.Normalize2LowerCase(metaName) + "` (`userid`, `refreshtime`, `flag`)");
            sb.AppendLine("      VALUES(p_userid, p_refreshtime, p_flag)");
            sb.AppendLine("        ON DUPLICATE KEY UPDATE `refreshtime` = VALUES(`refreshtime`),");
            sb.AppendLine("                                `flag` = VALUES(`flag`);");
            sb.AppendLine("  END IF;");
            sb.AppendLine("END;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Table structure for user_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP TABLE IF EXISTS `user_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("CREATE TABLE `user_" + Tool.Normalize2LowerCase(metaName) + "` (");
            sb.AppendLine("  `userid` varchar(50) NOT NULL COMMENT '用户帐号',");
            sb.AppendLine("  `sn` int(11) NOT NULL DEFAULT '0' COMMENT '序列号(唯一id)',");
            sb.AppendLine("  `cfgid` bigint(20) NOT NULL DEFAULT '0' COMMENT '配置类型id',");
            sb.AppendLine("  `state` int(11) NOT NULL COMMENT '状态',");
            sb.AppendLine("  `num` int(11) NOT NULL COMMENT '次数',");
            sb.AppendLine("  `starttime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '开始时间',");
            sb.AppendLine("  `seconds` int(11) NOT NULL COMMENT '倒计时',");
            sb.AppendLine("  `optime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '操作时间',");
            sb.AppendLine("  PRIMARY KEY (`userid`,`sn`)");
            sb.AppendLine(") ENGINE=InnoDB DEFAULT CHARSET=utf8;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Procedure structure for proc_load_user_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_load_user_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("CREATE PROCEDURE `proc_load_user_" + Tool.Normalize2LowerCase(metaName) + "`(IN `p_userid` varchar(50))");
            sb.AppendLine("BEGIN");
            sb.AppendLine("  IF char_length (p_userid) >= 6 THEN");
            sb.AppendLine("    --");
            sb.AppendLine("    SELECT * FROM user_" + Tool.Normalize2LowerCase(metaName) + " WHERE userid = p_userid ORDER BY sn ASC;");
            sb.AppendLine("  END IF;");
            sb.AppendLine("END;");
            sb.AppendLine("");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("-- Procedure structure for proc_save_user_" + Tool.Normalize2LowerCase(metaName) + "");
            sb.AppendLine("-- ----------------------------");
            sb.AppendLine("DROP PROCEDURE IF EXISTS `proc_save_user_" + Tool.Normalize2LowerCase(metaName) + "`;");
            sb.AppendLine("CREATE PROCEDURE `proc_save_user_" + Tool.Normalize2LowerCase(metaName) + "`(IN `p_userid` varchar(50),");
            sb.AppendLine("                                       IN `p_sn` int,");
            sb.AppendLine("                                       IN `p_cfgid` bigint,");
            sb.AppendLine("                                       IN `p_state` int,");
            sb.AppendLine("                                       IN `p_num` int,");
            sb.AppendLine("                                       IN `p_starttime` datetime,");
            sb.AppendLine("                                       IN `p_seconds` int,");
            sb.AppendLine("                                       IN `p_optime` datetime)");
            sb.AppendLine("BEGIN");
            sb.AppendLine("  --");
            sb.AppendLine("  IF char_length (p_userid) >= 6 AND p_sn > 0 THEN");
            sb.AppendLine("    IF 0 > p_state THEN");
            sb.AppendLine("      DELETE FROM `user_" + Tool.Normalize2LowerCase(metaName) + "` WHERE `userid` = p_userid AND `sn` = p_sn LIMIT 1;");
            sb.AppendLine("    ELSE");
            sb.AppendLine("      INSERT INTO `user_" + Tool.Normalize2LowerCase(metaName) + "` (`userid`, `sn`, `cfgid`, `state`, `num`, `starttime`, `seconds`, `optime`)");
            sb.AppendLine("        VALUES(p_userid, p_sn, p_cfgid, p_state, p_num, p_starttime, p_seconds, p_optime)");
            sb.AppendLine("          ON DUPLICATE KEY UPDATE `cfgid` = VALUES(`cfgid`),");
            sb.AppendLine("                                  `state` = VALUES(`state`),");
            sb.AppendLine("                                  `num` = VALUES(`num`),");
            sb.AppendLine("                                  `starttime` = VALUES(`starttime`),");
            sb.AppendLine("                                  `seconds` = VALUES(`seconds`),");
            sb.AppendLine("                                  `optime` = VALUES(`optime`);");
            sb.AppendLine("    END IF;");
            sb.AppendLine("  END IF;");
            sb.AppendLine("END;");
            return sb;
        }

        public static StringBuilder GenConfigHeader(string metaName)
        {
            string hubName = "ConfigHandler";
            string hubPrefix = "";
            string hubSuffix = "";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaPrefix = "Config";
            string metaSuffix = "";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenHeaderFileTitle("", "", hubName, hubPrefix, hubSuffix, metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("struct cfg_drop_t {");
            sb.AppendLine(_sIndent + "uint64_t _uItemId;");
            sb.AppendLine(_sIndent + "int _nAwardType;");
            sb.AppendLine(_sIndent + "int _nAwardNum;");
            sb.AppendLine(_sIndent + "float _fProbability;");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.AppendLine("struct cfg_" + Tool.Normalize2LowerCase(metaName) + "_t {");
            sb.AppendLine(_sIndent + "uint64_t _uCfgId; // typeid");
            sb.AppendLine(_sIndent + "float _fProbability;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "std::vector<cfg_drop_t> _vCfgDrop;");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenClassBrief(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("class C" + fullMetaName + " : public IConfig {");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "C" + fullMetaName + "(C" + fullHubName + " *parent) : _refParent(parent) {}");
            sb.AppendLine(_sIndent + "virtual ~C" + fullMetaName + "() {}");
            sb.AppendLine("");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "virtual void				OnParseResponse(db::proc_load_" + Tool.Normalize2LowerCase(fullMetaName) + "& response);");
            sb.AppendLine(_sIndent + "virtual void				OnParseConfig(int nIndex, const db::" + fullMetaName + "& row);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual bool				IsReady() { return _isReady; }");
            sb.AppendLine("");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "static const db::" + fullMetaName + " *	SearchConfigByLevel(int nLevel) {");
            sb.AppendLine(_sIndent_x_2 + "int i;");
            sb.AppendLine(_sIndent_x_2 + "for (i = 0; i < _recordList.list_size(); ++i) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "const db::" + fullMetaName + "& item = _recordList.list(i);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (item.level() == nLevel) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "return &item;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + "return nullptr;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "static cfg_" + Tool.Normalize2LowerCase(metaName) + "_t *	SearchCfg" + metaName + "(uint64_t uCfgId) {");
            sb.AppendLine(_sIndent_x_2 + "auto& it = _mapCfg" + metaName + ".find(uCfgId);");
            sb.AppendLine(_sIndent_x_2 + "if (it != _mapCfg" + metaName + ".end()) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "return &it->second;");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + "return nullptr;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "static cfg_" + Tool.Normalize2LowerCase(metaName) + "_t *	RandomDropCfg" + metaName + "(CLRandom& lrand);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "static db::" + fullMetaName + "List _recordList;");
            sb.AppendLine(_sIndent + "static std::map<uint64_t, cfg_" + Tool.Normalize2LowerCase(metaName) + "_t> _mapCfg" + metaName + "; // cfgid 2 cfg");
            sb.AppendLine("");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "C" + fullHubName + " *_refParent;");
            sb.AppendLine(_sIndent + "bool _isReady = false;");
            sb.AppendLine("");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.Append("/*EOF*/");
            return sb;
        }

        public static StringBuilder GenConfigCpp(string metaName)
        {
            string metaPrefix = "Config";
            string metaSuffix = "";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenCppFileTitle(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");

            sb.AppendLine("#define RECORD_MAX	999999");
            sb.AppendLine("db::" + fullMetaName + "List	C" + fullMetaName + "::_recordList;");
            sb.AppendLine("std::map<uint64_t, cfg_" + Tool.Normalize2LowerCase(metaName) + "_t> C" + fullMetaName + "::_mapCfg" + metaName + ";");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnParseResponse"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnParseResponse(db::proc_load_" + Tool.Normalize2LowerCase(fullMetaName) + "& response) {");
            sb.AppendLine(_sIndent + "int i;");
            sb.AppendLine(_sIndent + "int nCount = response.return_record_list_size();");
            sb.AppendLine(_sIndent + "for (i = 0; i < nCount; ++i) {");
            sb.AppendLine(_sIndent_x_2 + "const db::proc_load_" + Tool.Normalize2LowerCase(fullMetaName) + "::ReturnRecord& rr = response.return_record_list(i);");
            sb.AppendLine(_sIndent_x_2 + "const db::" + fullMetaName + "& row = rr.cfg();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "OnParseConfig(i, row);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "_isReady = true;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnParseConfig"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnParseConfig(int nIndex, const db::" + fullMetaName + "& row) {");
            sb.AppendLine(_sIndent + "if (nIndex >= RECORD_MAX)");
            sb.AppendLine(_sIndent_x_2 + "return;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "db::" + fullMetaName + " *record = nullptr;");
            sb.AppendLine(_sIndent + "if (_recordList.list_size() > nIndex) {");
            sb.AppendLine(_sIndent_x_2 + "// exist, overwrite");
            sb.AppendLine(_sIndent_x_2 + "record = _recordList.mutable_list(nIndex);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "else {");
            sb.AppendLine(_sIndent_x_2 + "record = _recordList.add_list();");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "record->CopyFrom(row);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "uint64_t uCfgId = record->typeid_();");
            sb.AppendLine(_sIndent + "cfg_" + Tool.Normalize2LowerCase(metaName) + "_t& cfg = _mapCfg" + metaName + "[uCfgId];");
            sb.AppendLine(_sIndent + "cfg._uCfgId = uCfgId;");
            sb.AppendLine(_sIndent + "cfg._fProbability = 1.0f;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// drop list -- \"itemid: award type: num : ratio | ...\"");
            sb.AppendLine(_sIndent + "{");
            sb.AppendLine(_sIndent_x_2 + "std::string sDropList = record->drop_list();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "char * chArr[256][32] = { 0 };");
            sb.AppendLine(_sIndent_x_2 + "int arrN2[256] = { 0 };");
            sb.AppendLine(_sIndent_x_2 + "int n = split2d(sDropList.c_str(), (int)sDropList.length(), chArr, 256, '|', ':', arrN2);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "int i;");
            sb.AppendLine(_sIndent_x_2 + "for (i = 0; i < n; ++i) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "uint64_t uItemId = 0;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "int nAwardType = 0;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "int nAwardNum = 0;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "float fProbability = 1.0f;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (arrN2[i] >= 4) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "uItemId = _atoi64(chArr[i][0]);");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "nAwardType = atoi(chArr[i][1]);");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "nAwardNum = atoi(chArr[i][2]);");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "fProbability = (float)atof(chArr[i][3]);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (uItemId > 0) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "cfg_drop_t cfg_drop;");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "cfg_drop._uItemId = uItemId;");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "cfg_drop._nAwardType = nAwardType;");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "cfg_drop._nAwardNum = nAwardNum;");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "cfg_drop._fProbability = fProbability;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "cfg._vCfgDrop.push_back(cfg_drop);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("RandomDrop" + metaName));
            sb.AppendLine("cfg_" + Tool.Normalize2LowerCase(metaName) + "_t *");
            sb.AppendLine("C" + fullMetaName + "::RandomDropCfg" + metaName + "(CLRandom& lrand) {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "if (1 == _mapCfg" + metaName + ".size()) {");
            sb.AppendLine(_sIndent_x_2 + "auto& itBegin = _mapCfg" + metaName + ".begin();");
            sb.AppendLine(_sIndent_x_2 + "return &itBegin->second;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "else if (_mapCfg" + metaName + ".size() > 1) {");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "float fSum1 = 0.0f;");
            sb.AppendLine(_sIndent_x_2 + "for (auto& iter1 : _mapCfg" + metaName + ") {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "auto& cfg = iter1.second;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "fSum1 += cfg._fProbability;");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "float fRand = lrand.GetRandomFloat(0.0f, fSum1);");
            sb.AppendLine(_sIndent_x_2 + "float fSum2 = 0.0f;");
            sb.AppendLine(_sIndent_x_2 + "for (auto& iter2 : _mapCfg" + metaName + ") {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "auto& cfg = iter2.second;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "fSum2 += cfg._fProbability;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (fRand <= fSum2) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "return &cfg;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "return nullptr;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.Append("/* -- EOF -- */");
            return sb;
        }

        public static StringBuilder GenProcHeader(string metaName)
        {
            string metaPrefix = "";
            string metaSuffix = "Proc";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenHeaderFileTitle("", "", "", "", "", metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenClassBrief(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("class C" + fullMetaName + " {");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "static void					Init(void *pHub);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine(_sIndent + "static void					ProcLoadConfig" + metaName + "();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine(_sIndent + "static void					ProcLoadGame" + metaName + "(bool bAsync);");
            sb.AppendLine(_sIndent + "static void					ProcLoadGame" + metaName + "(CRedisCacheProxy& cacheGame" + metaName + ");");
            sb.AppendLine(_sIndent + "static void					ProcSaveGame" + metaName + "(db::Game" + metaName + "& db_item);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "static void					ProcLoadUserStats" + metaName + "(CRedisCacheProxy& cacheStats" + metaName + ");");
            sb.AppendLine(_sIndent + "static void					ProcSaveUserStats" + metaName + "(const char *sUserId, db::UserStats" + metaName + "& db_item);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "static void					ProcLoadUser" + metaName + "(const char *sUserId);");
            sb.AppendLine(_sIndent + "static void					ProcSaveUser" + metaName + "(const char *sUserId, db::User" + metaName + "& db_item);");
            sb.AppendLine("");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.Append("/*EOF*/");
            return sb;
        }

        public static StringBuilder GenProcCpp(string hubName, string metaName)
        {
            string hubPrefix = "DbCache";
            string hubSuffix = "";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaPrefix = "";
            string metaSuffix = "Proc";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenCppFileTitle(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("static O2::C" + fullHubName + " *s_refHub = nullptr;");
            sb.AppendLine("static IDbService" + " *s_refDbs = nullptr;");
            sb.AppendLine("");

            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Init"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Init(void *pHub) {");
            sb.AppendLine(_sIndent + "s_refHub = static_cast<O2::C" + fullHubName + " *>(pHub);");
            sb.AppendLine(_sIndent + "s_refDbs = s_refHub->GetDbService();");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("ProcLoadConfig" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::ProcLoadConfig" + metaName + "() {");
            sb.AppendLine(_sIndent + "time_t tmNow = time(nullptr);");
            sb.AppendLine(_sIndent + "int nUUID = (int)tmNow;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "db::proc_load_config_" + Tool.Normalize2LowerCase(metaName) + " request;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// options");
            sb.AppendLine(_sIndent + "db::SaveAndLoadOptions *options = request.mutable_opt();");
            sb.AppendLine(_sIndent + "options->set_bytes_is_blob(false);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// param");
            sb.AppendLine(_sIndent + "db::proc_load_config_" + Tool.Normalize2LowerCase(metaName) + "::Parameter *param = request.mutable_param();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "s_refDbs->PbExecQuery(request);");
            sb.AppendLine(_sIndent + "CConfig" + metaName + " *pConfig = static_cast<CConfig" + metaName + " *>(s_refHub->GetConfigHandler()->GetConfigAt(SGCFGID_" + metaName.ToUpper() + "));");
            sb.AppendLine(_sIndent + "pConfig->OnParseResponse(request);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("ProcLoadGame" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::ProcLoadGame" + metaName + "(bool bAsync) {");
            sb.AppendLine(_sIndent + "DECLARE_PB_ARENA_VAR(db::proc_load_game_" + Tool.Normalize2LowerCase(metaName) + ", proc);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// options");
            sb.AppendLine(_sIndent + "db::SaveAndLoadOptions *options = proc.mutable_opt();");
            sb.AppendLine(_sIndent + "options->set_bytes_is_blob(false);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// param");
            sb.AppendLine(_sIndent + "db::proc_load_game_" + Tool.Normalize2LowerCase(metaName) + "::Parameter *param = proc.mutable_param();");
            sb.AppendLine("");
            sb.AppendLine("	if (bAsync) {");
            sb.AppendLine("		s_refDbs->PbExecQueryAsync(proc, [](const std::string& strResponse) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "DECLARE_PB_ARENA_VAR(db::proc_load_game_" + Tool.Normalize2LowerCase(metaName) + ", response);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "response.ParseFromString(strResponse);");
            sb.AppendLine("");
            sb.AppendLine("			CGame" + metaName + "Handler *pH = static_cast<CGame" + metaName + "Handler *>(s_refHub->GetHandlerAt(SGHID_GAME_" + Tool.Normalize2LowerCase(metaName).ToUpper() + "));");
            sb.AppendLine("			pH->OnParseGame" + metaName + "Response(response);");
            sb.AppendLine("		});");
            sb.AppendLine("	}");
            sb.AppendLine("	else {");
            sb.AppendLine("		s_refDbs->PbExecQuery(proc);");
            sb.AppendLine("		CGame" + metaName + "Handler *pH = static_cast<CGame" + metaName + "Handler *>(s_refHub->GetHandlerAt(SGHID_GAME_" + Tool.Normalize2LowerCase(metaName).ToUpper() + "));");
            sb.AppendLine("		pH->OnParseGame" + metaName + "Response(proc);");
            sb.AppendLine("	}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("ProcLoadGame" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::ProcLoadGame" + metaName + "(CRedisCacheProxy& cacheGame" + metaName + ") {");
            sb.AppendLine("	char rediskey[256] = { 0 };");
            sb.AppendLine("	DECLARE_PB_ARENA_VAR(db::proc_load_game_" + Tool.Normalize2LowerCase(metaName) + ", proc);");
            sb.AppendLine("");
            sb.AppendLine("	// options");
            sb.AppendLine("	db::SaveAndLoadOptions *options = proc.mutable_opt();");
            sb.AppendLine("	options->set_bytes_is_blob(false);");
            sb.AppendLine("");
            sb.AppendLine("	// param");
            sb.AppendLine("	db::proc_load_game_" + Tool.Normalize2LowerCase(metaName) + "::Parameter *param = proc.mutable_param();");
            sb.AppendLine("");
            sb.AppendLine("	//");
            sb.AppendLine("	s_refDbs->PbExecQuery(proc);");
            sb.AppendLine("");
            sb.AppendLine("	//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("	cacheGame" + metaName + ".Clear();");
            sb.AppendLine("");
            sb.AppendLine("	int nCount = proc.return_record_list_size();");
            sb.AppendLine("	if (nCount > 0) {");
            sb.AppendLine("		int i;");
            sb.AppendLine("		for (i = 0; i < nCount; ++i) {");
            sb.AppendLine("			auto& rr = proc.return_record_list(i);");
            sb.AppendLine("			auto& db_item = rr.item();");
            sb.AppendLine("");
            sb.AppendLine("			// push to redis");
            sb.AppendLine("			o_snprintf(rediskey, sizeof(rediskey), \"%d\",");
            sb.AppendLine("				db_item.id());");
            sb.AppendLine("			cacheGame" + metaName + ".Add(rediskey, db_item.SerializeAsString());");
            sb.AppendLine("		}");
            sb.AppendLine("	}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("ProcSaveGame" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::ProcSaveGame" + metaName + "(db::Game" + metaName + "& db_item) {");
            sb.AppendLine(_sIndent + "DECLARE_PB_ARENA_VAR(db::proc_save_game_" + Tool.Normalize2LowerCase(metaName) + ", proc);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// options");
            sb.AppendLine(_sIndent + "db::SaveAndLoadOptions *options = proc.mutable_opt();");
            sb.AppendLine(_sIndent + "options->set_bytes_is_blob(false);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// param");
            sb.AppendLine(_sIndent + "db::proc_save_game_" + Tool.Normalize2LowerCase(metaName) + "::Parameter *param = proc.mutable_param();");
            sb.AppendLine(_sIndent + "param->mutable_p_item()->CopyFrom(db_item);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "s_refDbs->PbExecUpdate(proc);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("ProcLoadUserStats" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::ProcLoadUserStats" + metaName + "(CRedisCacheProxy& cacheStats" + metaName + ") {");
            sb.AppendLine(_sIndent + "DECLARE_PB_ARENA_VAR(db::proc_load_user_stats_" + Tool.Normalize2LowerCase(metaName) + ", proc);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// options");
            sb.AppendLine(_sIndent + "db::SaveAndLoadOptions *options = proc.mutable_opt();");
            sb.AppendLine(_sIndent + "options->set_bytes_is_blob(false);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// param");
            sb.AppendLine(_sIndent + "db::proc_load_user_stats_" + Tool.Normalize2LowerCase(metaName) + "::Parameter *param = proc.mutable_param();");
            sb.AppendLine(_sIndent + "param->set_p_userid(sUserId);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "s_refDbs->PbExecQuery(proc);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine(_sIndent + "cacheStats" + metaName + ".Clear();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "int nCount = proc.return_record_list_size();");
            sb.AppendLine(_sIndent + "if (nCount > 0) {");
            sb.AppendLine(_sIndent_x_2 + "auto& rr = proc.return_record_list(0);");
            sb.AppendLine(_sIndent_x_2 + "auto& db_item = rr.item();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "// push to redis");
            sb.AppendLine(_sIndent_x_2 + "const char *rediskey = db_item.userid().c_str();");
            sb.AppendLine(_sIndent_x_2 + "cacheStats" + metaName + ".Add(rediskey, db_item.SerializeAsString());");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("ProcSaveUserStats" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::ProcSaveUserStats" + metaName + "(const char *sUserId, db::UserStats" + metaName + "& db_item) {");
            sb.AppendLine(_sIndent + "DECLARE_PB_ARENA_VAR(db::proc_save_user_stats_" + Tool.Normalize2LowerCase(metaName) + ", proc);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// options");
            sb.AppendLine(_sIndent + "db::SaveAndLoadOptions *options = proc.mutable_opt();");
            sb.AppendLine(_sIndent + "options->set_bytes_is_blob(false);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// param");
            sb.AppendLine(_sIndent + "db::proc_save_user_stats_" + Tool.Normalize2LowerCase(metaName) + "::Parameter *param = proc.mutable_param();");
            sb.AppendLine(_sIndent + "param->mutable_p_item()->CopyFrom(db_item);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "s_refDbs->PbExecUpdate(proc);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("ProcLoadUser" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::ProcLoadUser" + metaName + "(const char *sUserId) {");
            sb.AppendLine(_sIndent + "char rediskey[256] = { 0 };");
            sb.AppendLine(_sIndent + "DECLARE_PB_ARENA_VAR(db::proc_load_user_" + Tool.Normalize2LowerCase(metaName) + ", proc);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// options");
            sb.AppendLine(_sIndent + "db::SaveAndLoadOptions *options = proc.mutable_opt();");
            sb.AppendLine(_sIndent + "options->set_bytes_is_blob(false);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// param");
            sb.AppendLine(_sIndent + "db::proc_load_user_" + Tool.Normalize2LowerCase(metaName) + "::Parameter *param = proc.mutable_param();");
            sb.AppendLine(_sIndent + "param->set_p_userid(sUserId);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "s_refDbs->PbExecQuery(proc);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine(_sIndent + "CRedisCacheProxy cache(s_refHub->GetRedisHandler()->Entry(), \"db.User" + metaName + "\", sUserId);");
            sb.AppendLine(_sIndent + "cache.Clear();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "int nCount = proc.return_record_list_size();");
            sb.AppendLine(_sIndent + "if (nCount > 0) {");
            sb.AppendLine(_sIndent_x_2 + "int i;");
            sb.AppendLine(_sIndent_x_2 + "for (i = 0; i < nCount; ++i) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "auto& rr = proc.return_record_list(i);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "auto& db_item = rr.item();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "// push to redis");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "o_snprintf(rediskey, sizeof(rediskey), \"%d\", ");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "db_item.sn());");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "cache.Add(rediskey, db_item.SerializeAsString());");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("ProcSaveUser" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::ProcSaveUser" + metaName + "(const char *sUserId, db::User" + metaName + "& db_item) {");
            sb.AppendLine(_sIndent + "DECLARE_PB_ARENA_VAR(db::proc_save_user_" + Tool.Normalize2LowerCase(metaName) + ", proc);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// options");
            sb.AppendLine(_sIndent + "db::SaveAndLoadOptions *options = proc.mutable_opt();");
            sb.AppendLine(_sIndent + "options->set_bytes_is_blob(false);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// param");
            sb.AppendLine(_sIndent + "db::proc_save_user_" + Tool.Normalize2LowerCase(metaName) + "::Parameter *param = proc.mutable_param();");
            sb.AppendLine(_sIndent + "param->mutable_p_item()->CopyFrom(db_item);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "s_refDbs->PbExecUpdate(proc);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.Append("/* -- EOF -- */");
            return sb;
        }

        public static StringBuilder GenFarmerHeader(string hubName, string metaName)
        {
            string hubPrefix = "";
            string hubSuffix = "Server";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaPrefix = "";
            string metaSuffix = "Farmer";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenHeaderFileTitle("", "O2", hubName, hubPrefix, hubSuffix, metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenClassBrief(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("class C" + fullMetaName + " {");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "C" + fullMetaName + "(O2::C" + fullHubName + " *pHub, CPlatformAccountOfficer *pAO);");
            sb.AppendLine(_sIndent + "virtual ~C" + fullMetaName + "();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnParseUserStats" + metaName + "Response(const std::string& sCache);");
            sb.AppendLine(_sIndent + "virtual void				OnParseUser" + metaName + "Response(CRedisCacheProxy::RESULT_PAIR_LIST& vCache);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnTick(uint32_t uEventId);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnQuery" + metaName + "(sg::UserMapService_MapResponse& resp);");
            sb.AppendLine("");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "virtual void				Prepare(time_t tmNow);");
            sb.AppendLine(_sIndent + "virtual void				Unprepare();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "kj::Promise<void>			RetrieveStats" + metaName + "(CRedisHashTableBatchGetter& getter);");
            sb.AppendLine(_sIndent + "void						StoreStats" + metaName + "(db::UserStats" + metaName + "& db_item);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "kj::Promise<void>			Retrieve" + metaName + "(CRedisHashTableBatchGetter& getter);");
            sb.AppendLine(_sIndent + "void						Store" + metaName + "(db::User" + metaName + "& db_item);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "db::User" + metaName + " *	SearchUser" + metaName + "(int nSn) {");
            sb.AppendLine(_sIndent_x_2 + "if (uCfgId > 0) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "for (auto& it : _v" + metaName + ") {");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "db::User" + metaName + "& item = it;");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "if (item.sn() == nSn) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + _sIndent + "return &item;");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + "return nullptr;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine("private:");
            sb.AppendLine(_sIndent + "void						Check(time_t tmNow);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "db::User" + metaName + " *	Create" + metaName + "();");
            sb.AppendLine(_sIndent + "db::User" + metaName + " *	Create" + metaName + "(int nSn, uint64_t uCfgId);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "void						StartTick(int nInterval) {");
            sb.AppendLine(_sIndent_x_2 + "const int TICK_INTERVAL_SECONDS = nInterval;");
            sb.AppendLine(_sIndent_x_2 + "_timeTicker.SetIntervalTimerInMs(1L, TICK_INTERVAL_SECONDS * 1000, [this](uint32_t uEventId) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "OnTick(uEventId);");
            sb.AppendLine(_sIndent_x_2 + "});");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "void						StopTick() {");
            sb.AppendLine(_sIndent_x_2 + "_timeTicker.CancelTimer(1L);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine(_sIndent + "void						Notify" + metaName + "Change(std::map<uint64_t, db::User" + metaName + " *>& mapDirty);");
            sb.AppendLine(_sIndent + "void						StoreAndNotifyDirty" + metaName + "(std::map<uint64_t, db::User" + metaName + " *>& mapDirty);");
            sb.AppendLine(_sIndent + "void						Dump" + metaName + "(sg::" + metaName + "& resp_data, db::User" + metaName + "& db_item);");
            sb.AppendLine("");
            sb.AppendLine("private:");
            sb.AppendLine(_sIndent + "O2::C" + fullHubName + " *_refHub;");
            sb.AppendLine(_sIndent + "CPlatformAccountOfficer *_refAO;");
            sb.AppendLine(_sIndent + "CTimeTicker _timeTicker;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "db::UserStats" + metaName + " _stats_" + Tool.Normalize2LowerCase(metaName) + ";");
            sb.AppendLine(_sIndent + "std::vector<db::User" + metaName + "> _v" + metaName + ";");
            sb.AppendLine(_sIndent + "std::map<int, db::User" + metaName + "> _v" + metaName + "; // sn 2 db_item");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "CRedisCacheProxy _cacheStats" + metaName + ";");
            sb.AppendLine(_sIndent + "CRedisCacheProxy _cache" + metaName + ";");
            sb.AppendLine("");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.Append("/*EOF*/");
            return sb;
        }

        public static StringBuilder GenFarmerCpp(string hubName, string metaName)
        {
            string hubPrefix = "";
            string hubSuffix = "Server";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaPrefix = "";
            string metaSuffix = "Farmer";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenCppFileTitle(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("#define REFRESH_" + Tool.Normalize2LowerCase(metaName).ToUpper() + "_INTERVAL_SECONDS  30");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Ctor"));
            sb.AppendLine("C" + fullMetaName + "::C" + fullMetaName + "(O2::C" + fullHubName + " *pHub, CPlatformAccountOfficer *pAO)");
            sb.AppendLine(_sIndent + ": _refHub(pHub)");
            sb.AppendLine(_sIndent + ", _refAO(pAO)");
            sb.AppendLine(_sIndent + ", _timeTicker(\"[ticker] " + fullMetaName + "\", pHub->GetTimeoutEventHub(), pHub->GetHeartbeat())");
            sb.AppendLine(_sIndent + ", _cacheStats" + metaName + "(pHub->GetRedisHandler()->Entry(), \"db.UserStats" + metaName + "\")");
            sb.AppendLine(_sIndent + ", _cache" + metaName + "(pHub->GetRedisHandler()->Entry(), \"db.User" + metaName + "\", pAO->Account().uid) {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Dtor"));
            sb.AppendLine("C" + fullMetaName + "::~C" + fullMetaName + "() {");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnParseUserStats" + metaName + "Response"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnParseUserStats" + metaName + "Response(const std::string& sCache) {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "if (sCache.length() > 0) {");
            sb.AppendLine(_sIndent_x_2 + "db::UserStats" + metaName + " db_item;");
            sb.AppendLine(_sIndent_x_2 + "db_item.ParseFromString(sCache);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "_stats_" + Tool.Normalize2LowerCase(metaName) + ".CopyFrom(db_item);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "else {");
            sb.AppendLine(_sIndent_x_2 + "// default init");
            sb.AppendLine(_sIndent_x_2 + "_stats_" + Tool.Normalize2LowerCase(metaName) + ".set_userid(_refAO->Account().uid);");
            sb.AppendLine(_sIndent_x_2 + "_stats_" + Tool.Normalize2LowerCase(metaName) + ".set_refreshtime(0);");
            sb.AppendLine(_sIndent_x_2 + "_stats_" + Tool.Normalize2LowerCase(metaName) + ".set_flag(0);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnParseUser" + metaName + "Response"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnParseUser" + metaName + "Response(CRedisCacheProxy::RESULT_PAIR_LIST& vCache) {");
            sb.AppendLine(_sIndent + "int nCount = (int)vCache.size();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "_v" + metaName + ".clear();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "if (nCount > 0) {");
            sb.AppendLine(_sIndent_x_2 + "_v" + metaName + ".reserve(nCount / 2);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "const std::string *rkey;");
            sb.AppendLine(_sIndent_x_2 + "const std::string *rval;");
            sb.AppendLine(_sIndent_x_2 + "WALK_REDIS_REPLY_AS_RESULT_PAIR_BEGIN(vCache, rkey, rval) {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "db::User" + metaName + " db_item;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "db_item.ParseFromString(*rval);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "// ");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "_v" + metaName + ".emplace_back(db_item);");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + "WALK_REDIS_REPLY_AS_RESULT_PAIR_END()");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnTick"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnTick(uint32_t uEventId) {");
            sb.AppendLine(_sIndent + "time_t tmNow = time(nullptr);");
            sb.AppendLine(_sIndent + "Check(tmNow);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnQuery" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnQuery" + metaName + "(sg::User" + metaName + "Service_" + metaName + "Response& resp) {");
            sb.AppendLine(_sIndent + "int r = 0;");
            sb.AppendLine(_sIndent + "time_t tmNow = time(nullptr);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "resp.set_result(r);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Prepare"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Prepare(time_t tmNow) {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "Check(tmNow);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "StartTick(REFRESH_" + Tool.Normalize2LowerCase(metaName).ToUpper() + "_INTERVAL_SECONDS);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Unprepare" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Unprepare() {");
            sb.AppendLine(_sIndent + "StopTick();");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("RetrieveStats" + metaName));
            sb.AppendLine("kj::Promise<void>");
            sb.AppendLine("C" + fullMetaName + "::RetrieveStats" + metaName + "(CRedisHashTableBatchGetter& getter) {");
            sb.AppendLine(_sIndent + "getter.Push(_cacheStats" + metaName + ", _refAO->SafeUserId(), [this](CRedisReply& r) {");
            sb.AppendLine(_sIndent_x_2 + "std::string sCahe;");
            sb.AppendLine(_sIndent_x_2 + "if (r.is_string()) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "sCahe = std::move(r.as_string());");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + "OnParseUserStats" + metaName + "Response(sCahe);");
            sb.AppendLine(_sIndent + "});");
            sb.AppendLine(_sIndent + "return kj::READY_NOW;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("StoreStats" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::StoreStats" + metaName + "(db::UserStats" + metaName + "& db_item) {");
            sb.AppendLine(_sIndent + "const char *sUserId = db_item.userid().c_str();");
            sb.AppendLine(_sIndent + "_cacheStats" + metaName + ".Update(sUserId, db_item.SerializeAsString());");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Retrieve" + metaName));
            sb.AppendLine("kj::Promise<void>");
            sb.AppendLine("C" + fullMetaName + "::Retrieve" + metaName + "(CRedisHashTableBatchGetter& getter) {");
            sb.AppendLine(_sIndent + "getter.Push(_cache" + metaName + ", [this](CRedisReply& r) {");
            sb.AppendLine(_sIndent_x_2 + "CRedisCacheProxy::RESULT_PAIR_LIST vCache;");
            sb.AppendLine(_sIndent_x_2 + "if (r.is_array()) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "vCache = std::move(r.as_array());");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + "OnParseUser" + metaName + "Response(vCache);");
            sb.AppendLine(_sIndent + "});");
            sb.AppendLine(_sIndent + "return kj::READY_NOW;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Store" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Store" + metaName + "(db::User" + metaName + "& db_item) {");
            sb.AppendLine(_sIndent + "char chId[256];");
            sb.AppendLine(_sIndent + "o_snprintf(chId, sizeof(chId), \"%d\", db_item.sn());");
            sb.AppendLine(_sIndent + "_cache" + metaName + ".Update(chId, db_item.SerializeAsString());");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Check"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Check(time_t tmNow) {");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Create" + metaName));
            sb.AppendLine("db::User" + metaName + " *");
            sb.AppendLine("C" + fullMetaName + "::Create" + metaName + "() {");
            sb.AppendLine(_sIndent + "int nNextSn = 0;");
            sb.AppendLine(_sIndent + "for (auto& it : _v" + metaName + ") {");
            sb.AppendLine(_sIndent_x_2 + "if (nNextSn < it.sn()) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "nNextSn = it.sn();");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "++nNextSn;");
            sb.AppendLine(_sIndent + "_v" + metaName + ".resize(_v" + metaName + ".size() + 1);");
            sb.AppendLine(_sIndent + "db::User" + metaName + "& db_item = _v" + metaName + "[_v" + metaName + ".size()];");
            sb.AppendLine(_sIndent + "db_item.set_userid(_refAO->Account().uid);");
            sb.AppendLine(_sIndent + "db_item.set_sn(nNextSn);");
            sb.AppendLine(_sIndent + "db_item.set_cfgid(0);");
            sb.AppendLine(_sIndent + "db_item.set_state(0);");
            sb.AppendLine(_sIndent + "db_item.set_num(0);");
            sb.AppendLine(_sIndent + "db_item.set_starttime(0);");
            sb.AppendLine(_sIndent + "db_item.set_seconds(0);	");
            sb.AppendLine(_sIndent + "return &db_item;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Create" + metaName));
            sb.AppendLine("db::User" + metaName + " *");
            sb.AppendLine("C" + fullMetaName + "::Create" + metaName + "(int nSn, uint64_t uCfgId) {");
            sb.AppendLine(_sIndent + "auto& iter = _map" + metaName + ".find(nSn);");
            sb.AppendLine(_sIndent + "if (iter != _map" + metaName + ".end()) {");
            sb.AppendLine(_sIndent_x_2 + "return &iter->second;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "db::User" + metaName + "& db_item = _map" + metaName + "[nSn];");
            sb.AppendLine(_sIndent + "db_item.set_userid(_refAO->Account().uid);");
            sb.AppendLine(_sIndent + "db_item.set_sn(nSn);");
            sb.AppendLine(_sIndent + "db_item.set_cfgid(uCfgId);");
            sb.AppendLine(_sIndent + "db_item.set_state(0);");
            sb.AppendLine(_sIndent + "db_item.set_num(0);");
            sb.AppendLine(_sIndent + "db_item.set_starttime(0);");
            sb.AppendLine(_sIndent + "db_item.set_seconds(0);	");
            sb.AppendLine(_sIndent + "return &db_item;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Notify" + metaName + "Change"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Notify" + metaName + "Change(std::map<uint64_t, db::User" + metaName + " *>& mapDirty) {");
            sb.AppendLine(_sIndent + "if (mapDirty.size() > 0) {");
            sb.AppendLine(_sIndent_x_2 + "// notify to client");
            sb.AppendLine(_sIndent_x_2 + "sg::" + metaName + "StateNotify notify;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "for (auto& iter : mapDirty) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "db::User" + metaName + " *db_item = iter.second;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "sg::" + metaName + " *notify_item = notify.mutable_item_list()->add_list();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "//");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "Dump" + metaName + "(*notify_item, *db_item);");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + "_refAO->SendNotify(&notify);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("StoreAndNotifyDirty" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::StoreAndNotifyDirty" + metaName + "(std::map<uint64_t, db::User" + metaName + " *>& mapDirty) {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "for (auto& iter : mapDirty) {");
            sb.AppendLine(_sIndent_x_2 + "db::User" + metaName + " *db_item = iter.second;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "// save dirty item");
            sb.AppendLine(_sIndent_x_2 + "Store" + metaName + "(*db_item);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "Notify" + metaName + "Change(mapDirty);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Dump" + metaName));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Dump" + metaName + "(sg::" + metaName + "& resp_data, db::User" + metaName + "& db_item) {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "resp_data.set_id(db_item.sn());");
            sb.AppendLine(_sIndent + "resp_data.set_cfgid(db_item.cfgid());");
            sb.AppendLine(_sIndent + "resp_data.set_state((sg::" + metaName + "_ITEM_STATE)db_item.state());");
            sb.AppendLine(_sIndent + "resp_data.set_num(db_item.num());");
            sb.AppendLine(_sIndent + "resp_data.set_starttime(db_item.starttime());");
            sb.AppendLine(_sIndent + "resp_data.set_seconds(db_item.seconds());");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "resp_data.set_optime(db_item.optime());");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.Append("/* -- EOF -- */");
            return sb;
        }

        public static StringBuilder GenGameHandlerHeader(string hubName, string metaName)
        {
            string hubPrefix = "";
            string hubSuffix = "Server";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaPrefix = "";
            string metaSuffix = "Handler";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenHeaderFileTitle("", "O2", hubName, hubPrefix, hubSuffix, metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("struct game_" + Tool.Normalize2LowerCase(metaName) + "_t {");
            sb.AppendLine(_sIndent + "int _nId;");
            sb.AppendLine(_sIndent + "db::Game" + metaName + " _db_" + Tool.Normalize2LowerCase(metaName) + ";");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenClassBrief(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("class C" + fullMetaName + " : public IHandler {");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "C" + fullMetaName + "(O2::C" + fullHubName + " *pHub);");
            sb.AppendLine(_sIndent + "virtual ~C" + fullMetaName + "();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnInit(time_t tmNow);");
            sb.AppendLine(_sIndent + "virtual void				OnDelete();");
            sb.AppendLine(_sIndent + "virtual void				OnUpdate(float fElapsed);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnTimeout(uint32_t uEventId);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnParseGame" + metaName + "Response(db::proc_load_game_" + Tool.Normalize2LowerCase(metaName) + "& response);");
            sb.AppendLine(_sIndent + "virtual void				OnParseGame" + metaName + "Response(CRedisCacheProxy::RESULT_PAIR_LIST& vCache);");
            sb.AppendLine("");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "void						Load();");
            sb.AppendLine(_sIndent + "void						Reload();");
            sb.AppendLine("");
            sb.AppendLine("private:");
            sb.AppendLine(_sIndent + "kj::Promise<void>			RetrieveGame" + metaName + "();");
            sb.AppendLine(_sIndent + "void						StoreGame" + metaName + "(const db::Game" + metaName + "& db_item);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "game_" + Tool.Normalize2LowerCase(metaName) + "_t *	SearchGame" + metaName + "(int nId) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "std::map<int, game_" + Tool.Normalize2LowerCase(metaName) + "_t>::iterator it = _mapGame" + metaName + ".find(nId);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (it != _mapGame" + metaName + ".end()) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "return &(it->second);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "return nullptr;");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "int							NextGame" + metaName + "Id();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "void						SetEvent(uint32_t uEventId, int nTicks) {");
            sb.AppendLine(_sIndent_x_2 + "_timeTicker.SetExpireTimerInMs(uEventId, nTicks * 1000, [this](uint32_t uEventId) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "OnTimeout(uEventId);");
            sb.AppendLine(_sIndent_x_2 + "});");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "void						ClearEvent(uint32_t uEventId) {");
            sb.AppendLine(_sIndent_x_2 + "_timeTicker.CancelTimer(uEventId);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "static int					NextSubId() {");
            sb.AppendLine(_sIndent_x_2 + "return ++s_nNextSubId;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "static int s_nNextSubId;");
            sb.AppendLine("");
            sb.AppendLine("private:");
            sb.AppendLine(_sIndent + "O2::C" + fullHubName + " *_refHub;");
            sb.AppendLine(_sIndent + "CTimeTicker _timeTicker;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "db::Game" + metaName + "List _game_" + Tool.Normalize2LowerCase(metaName) + "_list;");
            sb.AppendLine(_sIndent + "std::map<int, game_" + Tool.Normalize2LowerCase(metaName) + "_t> _mapGame" + metaName + ";");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "CRedisCacheProxy _cacheGame" + metaName + ";");
            sb.AppendLine("");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.Append("/*EOF*/");
            return sb;
        }

        public static StringBuilder GenGameHandlerCpp(string hubName, string metaName)
        {
            string hubPrefix = "";
            string hubSuffix = "Server";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaPrefix = "";
            string metaSuffix = "Handler";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenCppFileTitle(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("#define TIMER_RELOAD_" + Tool.Normalize2LowerCase(metaName).ToUpper() + " 1L");
            sb.AppendLine("#define RELOAD_" + Tool.Normalize2LowerCase(metaName).ToUpper() + "_INTERVAL_SECONDS 15");
            sb.AppendLine("");
            sb.AppendLine("int C" + fullMetaName + "::s_nNextSubId = 0;");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Ctor"));
            sb.AppendLine("C" + fullMetaName + "::C" + fullMetaName + "(O2::C" + fullHubName + " *pHub)");
            sb.AppendLine(_sIndent + ": _refHub(pHub)");
            sb.AppendLine(_sIndent + ", _timeTicker(\"[ticker] " + fullMetaName + "\", pHub->GetTimeoutEventHub(), pHub->GetHeartbeat()) {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Dtor"));
            sb.AppendLine("C" + fullMetaName + "::~C" + fullMetaName + "() {");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnInit"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnInit(time_t tmNow) {");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnDelete"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnDelete() {");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnUpdate"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnUpdate(float fElapsed) {");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnTimeout"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnTimeout(uint32_t uEventId) {");
            sb.AppendLine(_sIndent + "Reload();");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnParseGame" + metaName + "Response"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnParseGame" + metaName + "Response(db::proc_load_game_" + Tool.Normalize2LowerCase(metaName) + "& response) {");
            sb.AppendLine(_sIndent + "db::proc_load_game_" + Tool.Normalize2LowerCase(metaName) + "::Parameter *param = response.mutable_param();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "db::Game" + metaName + " *db_item;");
            sb.AppendLine(_sIndent + "int nCount = response.return_record_list_size();");
            sb.AppendLine(_sIndent + "if (nCount > 0) {");
            sb.AppendLine(_sIndent_x_2 + "int i;");
            sb.AppendLine(_sIndent_x_2 + "for (i = 0; i < nCount; ++i) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "const db::proc_load_game_" + Tool.Normalize2LowerCase(metaName) + "::ReturnRecord& rr = response.return_record_list(i);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "db_item = _game_" + Tool.Normalize2LowerCase(metaName) + "_list.add_list();");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "db_item->CopyFrom(rr.item());");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// trigger next reload");
            sb.AppendLine(_sIndent + "SetEvent(TIMER_RELOAD_" + Tool.Normalize2LowerCase(metaName).ToUpper() + ", RELOAD_" + Tool.Normalize2LowerCase(metaName).ToUpper() + "_INTERVAL_SECONDS);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnParseGame" + metaName + "Response"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnParseGame" + metaName + "Response(CRedisCacheProxy::RESULT_PAIR_LIST& vCache) {");
            sb.AppendLine(_sIndent + "int nCount = (int)vCache.size();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "_mapGame" + metaName + ".clear();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "if (nCount > 0) {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "const std::string *rkey;");
            sb.AppendLine(_sIndent_x_2 + "const std::string *rval;");
            sb.AppendLine(_sIndent_x_2 + "WALK_REDIS_REPLY_AS_RESULT_PAIR_BEGIN(vCache, rkey, rval) {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "int nId = atoi(rkey->c_str());");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "db::Game" + metaName + " db_item;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "db_item.ParseFromString(*rval);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "// ignore disbanded");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (sg::GUILD_DISBANDED != db_item.state()) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "game_" + Tool.Normalize2LowerCase(metaName) + "_t& game_" + Tool.Normalize2LowerCase(metaName) + " = _mapGame" + metaName + "[nId];");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "game_" + Tool.Normalize2LowerCase(metaName) + "._nId = nId;");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "game_" + Tool.Normalize2LowerCase(metaName) + "._" + Tool.Normalize2LowerCase(metaName) + ".CopyFrom(db_item);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + "WALK_REDIS_REPLY_AS_RESULT_PAIR_END()");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Load"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Load() {");
            sb.AppendLine(_sIndent + "C" + metaName + "Proc::ProcLoadGame" + metaName + "(false);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Reload"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Reload() {");
            sb.AppendLine(_sIndent + "C" + metaName + "Proc::ProcLoadGame" + metaName + "(true);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.Append("/* -- EOF -- */");
            return sb;
        }

        public static StringBuilder GenStandaloneHeader()
        {
            string metaName = "Standalone";
            string metaPrefix = "";
            string metaSuffix = "";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenHeaderFileTitle("", "", "", "", "", metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenClassBrief(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("class C" + fullMetaName + " {");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "C" + fullMetaName + "();");
            sb.AppendLine(_sIndent + "virtual ~C" + fullMetaName + "();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnInit();");
            sb.AppendLine(_sIndent + "virtual void				OnDelete();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				Run();");
            sb.AppendLine("");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.Append("/*EOF*/");
            return sb;
        }

        public static StringBuilder GenStandaloneCpp(string hubName, string appSuffix)
        {
            string hubPrefix = "";
            string hubSuffix = appSuffix;
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaName = "Standalone";
            string metaPrefix = "";
            string metaSuffix = "";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenStandaloneCppFileTitle(fullMetaName));
            sb.AppendLine("");
            sb.AppendLine("namespace {");
            sb.AppendLine(_sIndent + "// anonymous namespace == static ");
            sb.AppendLine(_sIndent + "volatile sig_atomic_t s_quit = 0;");
            sb.AppendLine(_sIndent + "C" + fullHubName + " * s_app = nullptr;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "void signal_handler(int sig) {");
            sb.AppendLine(_sIndent_x_2 + "s_quit = 1;");
            sb.AppendLine(_sIndent_x_2 + "s_app->Exit();");
            sb.AppendLine(_sIndent_x_2 + "printf(\"\\ncatching close signal.\\n\");");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Ctor"));
            sb.AppendLine("C" + fullMetaName + "::C" + fullMetaName + "() {");
            sb.AppendLine(_sIndent + "// app");
            sb.AppendLine(_sIndent + "s_app = new C" + fullHubName + "();");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Dtor"));
            sb.AppendLine("C" + fullMetaName + "::~C" + fullMetaName + "() {");
            sb.AppendLine(_sIndent + "SAFE_DELETE(s_app);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnInit"));
            sb.AppendLine("void");
            sb.AppendLine("CStandalone::OnInit() {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "signal(SIGINT, signal_handler);");
            sb.AppendLine(_sIndent + "signal(SIGTERM, signal_handler);");
            sb.AppendLine("#ifdef SIGBREAK");
            sb.AppendLine(_sIndent + "signal(SIGBREAK, signal_handler);");
            sb.AppendLine("#endif");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "s_app->OnInit();");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnDelete"));
            sb.AppendLine("void");
            sb.AppendLine("CStandalone::OnDelete() {");
            sb.AppendLine(_sIndent + "s_app->OnDelete();");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Run"));
            sb.AppendLine("void");
            sb.AppendLine("CStandalone::Run() {");
            sb.AppendLine(_sIndent + "s_app->Run();");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.Append("/* -- EOF -- */");
            return sb;
        }

        public static StringBuilder GenMainCpp(string hubName, string appSuffix)
        {
            string hubSuffix = appSuffix;
            if (hubSuffix.EndsWith("App"))
                hubSuffix = hubSuffix.Substring(0, hubSuffix.Length - 3);

            string fullMetaName = "Main";

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenMainCppFileTitle(fullMetaName));
            sb.AppendLine("");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("///   app name");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("std::string g_appname = \"" + hubName + hubSuffix + "\";");
            sb.AppendLine("");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("///   plugin path");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("std::string g_plugin_path = \"\";");
            sb.AppendLine("");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("///   crash reboot flag");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("bool g_crash_reboot = false;");
            sb.AppendLine("");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("///   exit handle");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("namespace {");
            sb.AppendLine(_sIndent + "// anonymous namespace == static ");
            sb.AppendLine(_sIndent + "void on_exit(void* /*unused*/) {");
            sb.AppendLine(_sIndent_x_2 + "base::clear_at_exit();");
            sb.AppendLine(_sIndent_x_2 + "printf(\"\\nmain exit.\\n\");");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("///   main");
            sb.AppendLine("//////////////////////////////////////////////////////////////////////////");
            sb.AppendLine("int");
            sb.AppendLine("main(int argc, char* argv[]) {");
            sb.AppendLine("#ifdef _MSC_VER");
            sb.AppendLine("# ifdef _DEBUG");
            sb.AppendLine(_sIndent + "// enable memLeak check");
            sb.AppendLine(_sIndent_x_2 + "_CrtSetDbgFlag(_CrtSetDbgFlag(_CRTDBG_REPORT_FLAG) | _CRTDBG_LEAK_CHECK_DF);");
            sb.AppendLine(_sIndent_x_2 + "//_CrtSetBreakAlloc(9999);");
            sb.AppendLine("# endif");
            sb.AppendLine("#endif");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "if (argc > 1) {");
            sb.AppendLine(_sIndent_x_2 + "g_plugin_path = argv[1];");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// start app daemon");
            sb.AppendLine(_sIndent + "crash_reporter::CrashReporter::StringMap options;");
            sb.AppendLine(_sIndent + "options[\"crashesDirectory\"] = \"syslog/\";");
            sb.AppendLine(_sIndent + "if (g_plugin_path.length() > 0) {");
            sb.AppendLine(_sIndent_x_2 + "options[\"productName\"] = g_appname + \"_\" + g_plugin_path;");
            sb.AppendLine(_sIndent_x_2 + "options[\"restartCmdline\"] = std::string(\"\\\"\") + argv[0] + std::string(\"\\\" \") + g_plugin_path;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "else {");
            sb.AppendLine(_sIndent_x_2 + "options[\"productName\"] = g_appname;");
            sb.AppendLine(_sIndent_x_2 + "options[\"restartCmdline\"] = std::string(\"\\\"\") + argv[0] + std::string(\"\\\"\");");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "crash_reporter::CrashReporter::StartInstance(options);");
            sb.AppendLine("");
            sb.AppendLine("#ifdef _WIN32");
            sb.AppendLine(_sIndent + "::OleInitialize(nullptr);");
            sb.AppendLine("#endif");
            sb.AppendLine(_sIndent + "{");
            sb.AppendLine(_sIndent_x_2 + "base::AtExitManager at_exit_manager;");
            sb.AppendLine(_sIndent_x_2 + "base::CommandLine::Init(argc, argv);");
            sb.AppendLine(_sIndent_x_2 + "base::AtExitManager::RegisterCallback(on_exit, nullptr);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "if (base::CommandLine::InitializedForCurrentProcess()) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "g_crash_reboot = base::CommandLine::ForCurrentProcess()->HasSwitch(\"crash_reboot\");");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "CStandalone *pExe = new CStandalone();");
            sb.AppendLine(_sIndent_x_2 + "pExe->OnInit();");
            sb.AppendLine(_sIndent_x_2 + "pExe->Run();");
            sb.AppendLine(_sIndent_x_2 + "pExe->OnDelete();");
            sb.AppendLine(_sIndent_x_2 + "delete pExe;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "google::protobuf::ShutdownProtobufLibrary();");
            sb.AppendLine(_sIndent_x_2 + "crash_reporter::CrashReporter::ShutdownInstance();");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("#ifdef _WIN32");
            sb.AppendLine(_sIndent + "::OleUninitialize();");
            sb.AppendLine("#endif");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.Append("/* -- EOF -- */");
            return sb;
        }

        public static StringBuilder GenNetHeader(string hubName)
        {
            string hubPrefix = "";
            string hubSuffix = "Server";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaName = hubName;
            string metaPrefix = "";
            string metaSuffix = "ServerProto";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenHeaderFileTitle("#include \"../IInnerPBMessageDelegate.h\"", "O2", hubName, hubPrefix, hubSuffix, metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenClassBrief(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("class C" + fullMetaName + " {");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "C" + fullMetaName + "(O2::C" + fullHubName + " *pHub);");
            sb.AppendLine(_sIndent + "virtual ~C" + fullMetaName + "();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnConnectionConnected(ITcpConn *pConn);");
            sb.AppendLine(_sIndent + "virtual void				OnConnectionDisconnected(ITcpConn *pConn);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnHandleInnerPacket(ITcpConn *pConn, uint64_t uInnerUuid, uint8_t uSerialNo, std::string& sTypeName, std::string& sBody);");
            sb.AppendLine(_sIndent + "virtual void				OnInnerRequest(std::string& sTypeName, ITcpConn *pConn, uint64_t uInnerUuid, uint8_t uSerialNo, google::protobuf::MessageLite *pMessage);");
            sb.AppendLine("");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "void						Startup();");
            sb.AppendLine("");
            sb.AppendLine("private:");
            sb.AppendLine(_sIndent + "void						RegisterHandlers(ITcpEventManager& eventManager);");
            sb.AppendLine(_sIndent + "void						RegReqHandler(const char *sTypeName, IInnerPBMessageDelegate *pD);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "IInnerPBMessageDelegate *	LookupInnerRequestDelegate(const char *sTypeName) {");
            sb.AppendLine(_sIndent_x_2 + "auto& it = _mapDelegates.find(sTypeName);");
            sb.AppendLine(_sIndent_x_2 + "if (it != _mapDelegates.end()) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "return (it->second);");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + "return nullptr;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine("private:");
            sb.AppendLine(_sIndent + "O2::C" + fullHubName + " *_refHub;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "std::map<std::string, IInnerPBMessageDelegate *> _mapDelegates;");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.Append("/*EOF*/");
            return sb;
        }

        public static StringBuilder GenNetCpp(string hubName, string serviceMetaName)
        {
            string hubPrefix = "";
            string hubSuffix = "Server";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaName = hubName;
            string metaPrefix = "";
            string metaSuffix = "ServerProto";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            string serviceName = serviceMetaName + "Service";
            string serviceInc = "#include \""+ serviceName + ".h\"";

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenNetCppFileTitle(fullMetaName, serviceInc));
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Ctor"));
            sb.AppendLine("C" + fullMetaName + "::C" + fullMetaName + "(O2::C" + fullHubName + " *pHub)");
            sb.AppendLine(_sIndent + ": _refHub(pHub) {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Dtor"));
            sb.AppendLine("C" + fullMetaName + "::~C" + fullMetaName + "() {");
            sb.AppendLine(_sIndent + "// remove delegates");
            sb.AppendLine(_sIndent + "for (auto& iter : _mapDelegates) {");
            sb.AppendLine(_sIndent_x_2 + "delete iter.second;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "_mapDelegates.clear();");
            sb.AppendLine("}");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnConnectionConnected"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnConnectionConnected(ITcpConn *pConn) {");
            sb.AppendLine(_sIndent + "// reset gate info");
            sb.AppendLine(_sIndent + "_refHub->ResetGateInfoByShakeHandConn(pConn);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnConnectionDisconnected"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnConnectionDisconnected(ITcpConn *pConn) {");
            sb.AppendLine(_sIndent + "// reset gate info");
            sb.AppendLine(_sIndent + "_refHub->ResetGateInfoByShakeHandConn(pConn);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnHandleInnerPacket"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnHandleInnerPacket(ITcpConn *pConn, uint64_t uInnerUuid, uint8_t uSerialNo, std::string& sTypeName, std::string& sBody) {");
            sb.AppendLine(_sIndent + "int nResult = PACKET_STATE_ABORT;");
            sb.AppendLine(_sIndent + "const google::protobuf::Descriptor *descriptor = google::protobuf::DescriptorPool::generated_pool()->FindMessageTypeByName(sTypeName);");
            sb.AppendLine(_sIndent + "if (descriptor) {");
            sb.AppendLine(_sIndent_x_2 + "const google::protobuf::Message *prototype = google::protobuf::MessageFactory::generated_factory()->GetPrototype(descriptor);");
            sb.AppendLine(_sIndent_x_2 + "if (prototype) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "/*");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "google::protobuf::Message *pMessage = prototype->New();");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "#ifdef _DEBUG");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (pMessage->ParseFromArray(pBody, nBodySize)) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "#else");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (pMessage->ParsePartialFromArray(pBody, nBodySize)) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "#endif");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "OnInnerRequest(sTypeName, pConn, uInnerUuid, pMessage);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "nResult = PACKET_STATE_PROCESS_OK;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "//");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "delete pMessage;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}*/");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "google::protobuf::Arena arena;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "google::protobuf::Message *pMessage = prototype->New(&arena);");
            sb.AppendLine("#ifdef _DEBUG");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (pMessage->ParseFromString(sBody))");
            sb.AppendLine("#else");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (pMessage->ParsePartialFromString(sBody))");
            sb.AppendLine("#endif");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "{");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "OnInnerRequest(sTypeName, pConn, uInnerUuid, uSerialNo, pMessage);");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "nResult = PACKET_STATE_PROCESS_OK;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "// Must not delete the message here. ");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "// It will be deleted automatically when the arena is destroyed.");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "if (PACKET_STATE_ABORT == nResult) {");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "_refHub->GetLogHandler()->logprint(LOG_LEVEL_FATAL, \"\\n !!!!!!!! (%llu)[C" + fullMetaName + "::OnHandleInnerPacket()] error -- sTypeName=%s, nBodySize=%d !!!!!!!! \\n\",");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "pConn->GetConnId(), sTypeName.c_str(), (int)sBody.length());");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnInnerRequest"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnInnerRequest(std::string& sTypeName, ITcpConn *pConn, uint64_t uInnerUuid, uint8_t uSerialNo, google::protobuf::MessageLite *pMessage) {");
            sb.AppendLine(_sIndent + "IInnerPBMessageDelegate *pD = LookupInnerRequestDelegate(sTypeName.c_str());");
            sb.AppendLine(_sIndent + "if (pD) {");
            sb.AppendLine(_sIndent_x_2 + "pD->OnResponse(pConn, uInnerUuid, uSerialNo, pMessage);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "else {");
            sb.AppendLine(_sIndent_x_2 + "// error");
            sb.AppendLine(_sIndent_x_2 + "_refHub->GetLogHandler()->logprint(LOG_LEVEL_ERROR, \"\\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n!!!!!!!! [C" + fullMetaName + "::OnInnerRequest()] can't find inner request handler for message(%s), inner_uuid=%lld, serial_no=%d!!!!!!!!\\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\",");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "sTypeName.c_str(), uInnerUuid, uSerialNo);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Startup"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Startup() {");
            sb.AppendLine(_sIndent + "ITcpEventManager& eventManager = _refHub->GetNetSystem()->GetLobbyServerEventManager();");
            sb.AppendLine(_sIndent + "RegisterHandlers(eventManager);");
            sb.AppendLine(_sIndent + "eventManager.SetReady(true);");
            sb.AppendLine(_sIndent + "eventManager.OnEvent(SERVICE_READY, NULL);");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("RegisterHandlers"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::RegisterHandlers(ITcpEventManager& eventManager) {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "eventManager.RegisterEventHandler(CONNECTION_CONNECTED, std::bind(&C" + fullMetaName + "::OnConnectionConnected, this, std::placeholders::_1));");
            sb.AppendLine(_sIndent + "eventManager.RegisterEventHandler(CONNECTION_DISCONNECTED, std::bind(&C" + fullMetaName + "::OnConnectionDisconnected, this, std::placeholders::_1));");
            sb.AppendLine(_sIndent + "eventManager.RegisterInnerPacketHandler(std::bind(&C" + fullMetaName + "::OnHandleInnerPacket, this,");
            sb.AppendLine(_sIndent_x_2 + "std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5));");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "///<<< from client");
            sb.AppendLine(_sIndent_x_2 + "RegReqHandler(\"sg." + serviceName + "\", new C" + serviceName + "(_refHub));");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("RegReqHandler"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::RegReqHandler(const char *sTypeName, IInnerPBMessageDelegate *pD) {");
            sb.AppendLine(_sIndent + "_mapDelegates[sTypeName] = pD;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("/* -- EOF -- */");
            return sb;
        }

        public static StringBuilder GenServiceHeader(string hubName, string metaName)
        {
            string hubPrefix = "";
            string hubSuffix = "Server";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaPrefix = "";
            string metaSuffix = "Service";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenHeaderFileTitle("#include \"../IInnerPBMessageDelegate.h\"", "", "", "", "", metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenClassBrief(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("class C" + fullMetaName + " : public IInnerPBMessageDelegate {");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "C" + fullMetaName + "(O2::C" + fullHubName + " *pHub) : _refHub(pHub) {}");
            sb.AppendLine(_sIndent + "virtual ~C" + fullMetaName + "() {}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual int					OnResponse(ITcpConn *pConn, uint64_t uInnerUuid, uint8_t uSerialNo, google::protobuf::MessageLite *pMessage);");
            sb.AppendLine("");
            sb.AppendLine("private:");
            sb.AppendLine(_sIndent + "O2::C" + fullHubName + " *_refHub;");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.Append("/*EOF*/");
            return sb;
        }

        public static StringBuilder GenServiceCpp(string metaName)
        {
            string metaPrefix = "";
            string metaSuffix = "Service";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenCppFileTitle(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");

            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnResponse"));
            sb.AppendLine("int");
            sb.AppendLine("C" + fullMetaName + "::OnResponse(ITcpConn *pConn, uint64_t uInnerUuid, uint8_t uSerialNo, google::protobuf::MessageLite *pMessage) {");
            sb.AppendLine(_sIndent + "sg::" + fullMetaName + " *request = static_cast<sg::" + fullMetaName + " *>(pMessage);");
            sb.AppendLine(_sIndent + "sg::" + fullMetaName + " response;");
            sb.AppendLine(_sIndent + "sg::" + fullMetaName + "_" + metaName + "Response *resp = response.mutable_resp();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// check ao exists");
            sb.AppendLine(_sIndent + "IF_ACCOUNT_VALID() {");
            sb.AppendLine(_sIndent_x_2 + "sg::" + fullMetaName + "_" + metaName.ToUpper() + "_COMMAND cmd = request->req().cmd();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "response.mutable_req()->set_cmd(cmd);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "pConn->SendPBMessage(&response, uInnerUuid, uSerialNo);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "ELSE_IF_ACCOUNT_NOT_VALID() {");
            sb.AppendLine(_sIndent_x_2 + "resp->set_result(ERROR_CODE_INVALID_AO);");
            sb.AppendLine(_sIndent_x_2 + "pConn->SendPBMessage(&response, uInnerUuid, uSerialNo);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "return 0;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.Append("/* -- EOF -- */");
            return sb;
        }

        public static StringBuilder GenNetUpwardHeader(string hubName)
        {
            string hubPrefix = "";
            string hubSuffix = "Server";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaName = "UpwardToPay";
            string metaPrefix = "";
            string metaSuffix = "Proto";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenHeaderFileTitle("#include \"../IInnerPBMessageDelegate.h\"", "O2", hubName, hubPrefix, hubSuffix, metaName, metaPrefix, metaSuffix));
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenClassBrief(metaName, metaPrefix, metaSuffix));
            sb.AppendLine("class C" + fullMetaName + " {");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "C" + fullMetaName + "(O2::C" + fullHubName + " *pHub);");
            sb.AppendLine(_sIndent + "virtual ~C" + fullMetaName + "();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnConnectionConnected(ITcpConn *pConn);");
            sb.AppendLine(_sIndent + "virtual void				OnConnectionDisconnected(ITcpConn *pConn);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnHandleInnerPacket(ITcpConn *pConn, uint64_t uInnerUuid, uint8_t uSerialNo, std::string& sTypeName, std::string& sBody);");
            sb.AppendLine(_sIndent + "virtual void				OnInnerRequest(std::string& sTypeName, ITcpConn *pConn, uint64_t uInnerUuid, uint8_t uSerialNo, google::protobuf::MessageLite *pMessage);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "virtual void				OnTick(uint32_t uEventId);");
            sb.AppendLine("");
            sb.AppendLine("public:");
            sb.AppendLine(_sIndent + "ITcpIsolated *				GetConn() {");
            sb.AppendLine(_sIndent_x_2 + "return _upwardConn;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "void						Startup();");
            sb.AppendLine(_sIndent + "void						Shutdown();");
            sb.AppendLine(_sIndent + "void						TryRegister();");
            sb.AppendLine(_sIndent + "void						KeepAliveNotify();");
            sb.AppendLine(_sIndent + "void						RegisterNativeClient();");
            sb.AppendLine("");
            sb.AppendLine("private:");
            sb.AppendLine(_sIndent + "void						RegisterHandlers(ITcpEventManager& eventManager);");
            sb.AppendLine(_sIndent + "void						RegReqHandler(const char *sTypeName, IInnerPBMessageDelegate *pD);");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "IInnerPBMessageDelegate *	LookupInnerRequestDelegate(const char *sTypeName) {");
            sb.AppendLine(_sIndent_x_2 + "auto& it = _mapDelegates.find(sTypeName);");
            sb.AppendLine(_sIndent_x_2 + "if (it != _mapDelegates.end()) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "return (it->second);");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent_x_2 + "return nullptr;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "void						StartTick() {");
            sb.AppendLine(_sIndent_x_2 + "const int TICK_INTERVAL_SECONDS = 10;");
            sb.AppendLine(_sIndent_x_2 + "_timeTicker.SetIntervalTimerInMs(1L, TICK_INTERVAL_SECONDS * 1000, [this](uint32_t uEventId) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "OnTick(uEventId);");
            sb.AppendLine(_sIndent_x_2 + "});");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "void						StopTick() {");
            sb.AppendLine(_sIndent_x_2 + "_timeTicker.CancelTimer(1L);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine("private:");
            sb.AppendLine(_sIndent + "O2::CSandboxServer *_refHub;");
            sb.AppendLine(_sIndent + "CTimeTicker _timeTicker;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "ITcpIsolated *_upwardConn = nullptr;");
            sb.AppendLine(_sIndent + "bool _bUpwardServerReady = false;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "std::map<std::string, IInnerPBMessageDelegate *> _mapDelegates;");
            sb.AppendLine("};");
            sb.AppendLine("");
            sb.Append("/*EOF*/");
            return sb;
        }

        public static StringBuilder GenNetUpwardCpp(string hubName, string serviceMetaName)
        {
            string hubPrefix = "";
            string hubSuffix = "Server";
            string fullHubName = _GenFullName(hubName, hubPrefix, hubSuffix);

            string metaName = "UpwardToPay";
            string metaPrefix = "";
            string metaSuffix = "Proto";
            string fullMetaName = _GenFullName(metaName, metaPrefix, metaSuffix);

            string serviceName = serviceMetaName + "Service";
            string serviceInc = "#include \"" + serviceName + ".h\"";

            StringBuilder sb = new StringBuilder();
            sb.Append(_GenNetCppFileTitle(fullMetaName, serviceInc));
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Ctor"));
            sb.AppendLine("C" + fullMetaName + "::C" + fullMetaName + "(O2::C" + fullHubName + " *pHub)");
            sb.AppendLine(_sIndent + ": _refHub(pHub)");
            sb.AppendLine(_sIndent + ", _timeTicker(\"[ticker] " + fullMetaName + "\", pHub->GetTimeoutEventHub(), pHub->GetHeartbeat()) {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "StartTick();");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Dtor"));
            sb.AppendLine("C" + fullMetaName + "::~C" + fullMetaName + "() {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "StopTick();");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "Shutdown();");
            sb.AppendLine(_sIndent + "// remove delegates");
            sb.AppendLine(_sIndent + "for (auto& iter : _mapDelegates) {");
            sb.AppendLine(_sIndent_x_2 + "delete iter.second;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "_mapDelegates.clear();");
            sb.AppendLine("}");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnConnectionConnected"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnConnectionConnected(ITcpConn *pConn) {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "_bUpwardServerReady = true;");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "// try register to upward server");
            sb.AppendLine(_sIndent + "TryRegister();");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnConnectionDisconnected"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnConnectionDisconnected(ITcpConn *pConn) {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "_bUpwardServerReady = false;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnHandleInnerPacket"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnHandleInnerPacket(ITcpConn *pConn, uint64_t uInnerUuid, uint8_t uSerialNo, std::string& sTypeName, std::string& sBody) {");
            sb.AppendLine(_sIndent + "int nResult = PACKET_STATE_ABORT;");
            sb.AppendLine(_sIndent + "const google::protobuf::Descriptor *descriptor = google::protobuf::DescriptorPool::generated_pool()->FindMessageTypeByName(sTypeName);");
            sb.AppendLine(_sIndent + "if (descriptor) {");
            sb.AppendLine(_sIndent_x_2 + "const google::protobuf::Message *prototype = google::protobuf::MessageFactory::generated_factory()->GetPrototype(descriptor);");
            sb.AppendLine(_sIndent_x_2 + "if (prototype) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "/*");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "google::protobuf::Message *pMessage = prototype->New();");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "#ifdef _DEBUG");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (pMessage->ParseFromArray(pBody, nBodySize)) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "#else");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (pMessage->ParsePartialFromArray(pBody, nBodySize)) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "#endif");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "OnInnerRequest(sTypeName, pConn, uInnerUuid, pMessage);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "nResult = PACKET_STATE_PROCESS_OK;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "//");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "delete pMessage;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}*/");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "google::protobuf::Arena arena;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "google::protobuf::Message *pMessage = prototype->New(&arena);");
            sb.AppendLine("#ifdef _DEBUG");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (pMessage->ParseFromString(sBody))");
            sb.AppendLine("#else");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "if (pMessage->ParsePartialFromString(sBody))");
            sb.AppendLine("#endif");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "{");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "OnInnerRequest(sTypeName, pConn, uInnerUuid, uSerialNo, pMessage);");
            sb.AppendLine(_sIndent_x_2 + _sIndent_x_2 + "nResult = PACKET_STATE_PROCESS_OK;");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "}");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "// Must not delete the message here. ");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "// It will be deleted automatically when the arena is destroyed.");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "if (PACKET_STATE_ABORT == nResult) {");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "_refHub->GetLogHandler()->logprint(LOG_LEVEL_FATAL, \"\\n !!!!!!!! (%llu)[C" + fullMetaName + "::OnHandleInnerPacket()] error -- sTypeName=%s, nBodySize=%d !!!!!!!! \\n\",");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "pConn->GetConnId(), sTypeName.c_str(), (int)sBody.length());");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnInnerRequest"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnInnerRequest(std::string& sTypeName, ITcpConn *pConn, uint64_t uInnerUuid, uint8_t uSerialNo, google::protobuf::MessageLite *pMessage) {");
            sb.AppendLine(_sIndent + "IInnerPBMessageDelegate *pD = LookupInnerRequestDelegate(sTypeName.c_str());");
            sb.AppendLine(_sIndent + "if (pD) {");
            sb.AppendLine(_sIndent_x_2 + "pD->OnResponse(pConn, uInnerUuid, uSerialNo, pMessage);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine(_sIndent + "else {");
            sb.AppendLine(_sIndent_x_2 + "// error");
            sb.AppendLine(_sIndent_x_2 + "_refHub->GetLogHandler()->logprint(LOG_LEVEL_ERROR, \"\\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n!!!!!!!! [C" + fullMetaName + "::OnInnerRequest()] can't find inner request handler for message(%s), inner_uuid=%lld, serial_no=%d!!!!!!!!\\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\",");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "sTypeName.c_str(), uInnerUuid, uSerialNo);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("OnTick"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::OnTick(uint32_t uEventId) {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "if (_bUpwardServerReady) {");
            sb.AppendLine(_sIndent_x_2 + "KeepAliveNotify();");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Startup"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Startup() {");
            sb.AppendLine(_sIndent + "// open isolated");
            sb.AppendLine(_sIndent + "if (nullptr == _upwardConn");
            sb.AppendLine(_sIndent_x_2 + "&& _refHub->_upwardServerIp.length() > 8) {");
            sb.AppendLine(_sIndent_x_2 + "_upwardConn = _refHub->GetNetSystem()->GetLobby().OpenTcpIsolated(_refHub->_upwardServerIp, _refHub->_upwardServerPort, _refHub->GetLogHandler());");
            sb.AppendLine(_sIndent_x_2 + "if (_upwardConn) {");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "ITcpEventManager& eventManager = _upwardConn->GetEventManager();");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "RegisterHandlers(eventManager);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "eventManager.SetReady(true);");
            sb.AppendLine(_sIndent_x_2 + _sIndent + "eventManager.OnEvent(SERVICE_READY, nullptr);");
            sb.AppendLine(_sIndent_x_2 + "}");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("Shutdown"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::Shutdown() {");
            sb.AppendLine(_sIndent + "if (_upwardConn) {");
            sb.AppendLine(_sIndent_x_2 + "_upwardConn->Disconnect();");
            sb.AppendLine(_sIndent_x_2 + "_upwardConn = nullptr;");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("TryRegister"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::TryRegister() {");
            sb.AppendLine(_sIndent + "//");
            sb.AppendLine(_sIndent + "if (_refHub->TestReadyFlag(SERVER_READY_FLAG_SERVER_ID)");
            sb.AppendLine(_sIndent_x_2 + "&& _bUpwardServerReady) {");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "RegisterNativeClient();");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "// pvp server ready");
            sb.AppendLine(_sIndent_x_2 + "_refHub->SetReadyFlag(SERVER_READY_FLAG_PVP_SERVER);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("KeepAliveNotify"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::KeepAliveNotify() {");
            sb.AppendLine(_sIndent + "if (_upwardConn");
            sb.AppendLine(_sIndent_x_2 + "&& _upwardConn->IsConnected()) {");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "gate::KeepAliveNotify request;");
            sb.AppendLine(_sIndent_x_2 + "request.set_serverid(_refHub->_serverId);");
            sb.AppendLine(_sIndent_x_2 + "_upwardConn->SendPBMessage(&request, 0, _refHub->_serverId);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("RegisterNativeClient"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::RegisterNativeClient() {");
            sb.AppendLine(_sIndent + "if (_upwardConn");
            sb.AppendLine(_sIndent_x_2 + "&& _upwardConn->IsConnected()) {");
            sb.AppendLine(_sIndent_x_2 + "//");
            sb.AppendLine(_sIndent_x_2 + "gate::RegisterNativeClientService request;");
            sb.AppendLine(_sIndent_x_2 + "gate::RegisterNativeClientService_RegisterRequest *req = request.mutable_req();");
            sb.AppendLine(_sIndent_x_2 + "req->set_id(_refHub->_serverId);");
            sb.AppendLine(_sIndent_x_2 + "req->set_name(_refHub->_serverName);");
            sb.AppendLine(_sIndent_x_2 + "_upwardConn->SendPBMessage(&request, 0, _refHub->_serverId);");
            sb.AppendLine(_sIndent + "}");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("RegisterHandlers"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::RegisterHandlers(ITcpEventManager& eventManager) {");
            sb.AppendLine("");
            sb.AppendLine(_sIndent + "eventManager.RegisterEventHandler(CONNECTION_CONNECTED, std::bind(&C" + fullMetaName + "::OnConnectionConnected, this, std::placeholders::_1));");
            sb.AppendLine(_sIndent + "eventManager.RegisterEventHandler(CONNECTION_DISCONNECTED, std::bind(&C" + fullMetaName + "::OnConnectionDisconnected, this, std::placeholders::_1));");
            sb.AppendLine(_sIndent + "eventManager.RegisterInnerPacketHandler(std::bind(&C" + fullMetaName + "::OnHandleInnerPacket, this,");
            sb.AppendLine(_sIndent_x_2 + "std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5));");
            sb.AppendLine("");
            sb.AppendLine(_sIndent_x_2 + "///<<< from upward server");
            sb.AppendLine(_sIndent_x_2 + "RegReqHandler(\"sg." + serviceName + "\", new C" + serviceName + "(_refHub));");
            sb.AppendLine("");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine(_GenMethodBrief("RegReqHandler"));
            sb.AppendLine("void");
            sb.AppendLine("C" + fullMetaName + "::RegReqHandler(const char *sTypeName, IInnerPBMessageDelegate *pD) {");
            sb.AppendLine(_sIndent + "_mapDelegates[sTypeName] = pD;");
            sb.AppendLine("}");
            sb.AppendLine("");
            sb.AppendLine("/* -- EOF -- */");
            return sb;
        }

    }
}